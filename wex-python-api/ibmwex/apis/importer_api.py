# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ImporterApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_csv(self, upload_id, file, **kwargs):
        """
        Add a CSV file
        Uploads a new CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_csv(upload_id, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str upload_id: The ID of the upload request. (required)
        :param file file: (required)
        :return: UploadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_csv_with_http_info(upload_id, file, **kwargs)
        else:
            (data) = self.add_csv_with_http_info(upload_id, file, **kwargs)
            return data

    def add_csv_with_http_info(self, upload_id, file, **kwargs):
        """
        Add a CSV file
        Uploads a new CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_csv_with_http_info(upload_id, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str upload_id: The ID of the upload request. (required)
        :param file file: (required)
        :return: UploadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_id', 'file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params) or (params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `add_csv`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `add_csv`")


        collection_formats = {}

        path_params = {}
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/importer/csv/upload/{uploadId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UploadResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create(self, dataset_id, body, **kwargs):
        """
        Create an importer
        Creates a new importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(dataset_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param CrawlerConfiguration body: (required)
        :return: Importer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(dataset_id, body, **kwargs)
        else:
            (data) = self.create_with_http_info(dataset_id, body, **kwargs)
            return data

    def create_with_http_info(self, dataset_id, body, **kwargs):
        """
        Create an importer
        Creates a new importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(dataset_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param CrawlerConfiguration body: (required)
        :return: Importer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params) or (params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `create`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")


        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/datasets/{datasetId}/importers', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Importer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete(self, dataset_id, importer_id, **kwargs):
        """
        Delete an importer
        Deletes an existing importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_with_http_info(dataset_id, importer_id, **kwargs)
        else:
            (data) = self.delete_with_http_info(dataset_id, importer_id, **kwargs)
            return data

    def delete_with_http_info(self, dataset_id, importer_id, **kwargs):
        """
        Delete an importer
        Deletes an existing importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_with_http_info(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'importer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params) or (params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `delete`")
        # verify the required parameter 'importer_id' is set
        if ('importer_id' not in params) or (params['importer_id'] is None):
            raise ValueError("Missing the required parameter `importer_id` when calling `delete`")


        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']
        if 'importer_id' in params:
            path_params['importerId'] = params['importer_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/datasets/{datasetId}/importers/{importerId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SimpleResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_csv(self, upload_id, file_name, **kwargs):
        """
        Delete a CSV file
        Deletes an uploaded CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_csv(upload_id, file_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str upload_id: The ID of the upload request. (required)
        :param str file_name: The name of file. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_csv_with_http_info(upload_id, file_name, **kwargs)
        else:
            (data) = self.delete_csv_with_http_info(upload_id, file_name, **kwargs)
            return data

    def delete_csv_with_http_info(self, upload_id, file_name, **kwargs):
        """
        Delete a CSV file
        Deletes an uploaded CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_csv_with_http_info(upload_id, file_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str upload_id: The ID of the upload request. (required)
        :param str file_name: The name of file. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_id', 'file_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params) or (params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `delete_csv`")
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params) or (params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `delete_csv`")


        collection_formats = {}

        path_params = {}
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']
        if 'file_name' in params:
            path_params['fileName'] = params['file_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/importer/csv/upload/{uploadId}/{fileName}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get(self, dataset_id, importer_id, **kwargs):
        """
        List importer details
        Display detailed information about an existing importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: CrawlerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_with_http_info(dataset_id, importer_id, **kwargs)
        else:
            (data) = self.get_with_http_info(dataset_id, importer_id, **kwargs)
            return data

    def get_with_http_info(self, dataset_id, importer_id, **kwargs):
        """
        List importer details
        Display detailed information about an existing importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_with_http_info(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: CrawlerConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'importer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params) or (params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `get`")
        # verify the required parameter 'importer_id' is set
        if ('importer_id' not in params) or (params['importer_id'] is None):
            raise ValueError("Missing the required parameter `importer_id` when calling `get`")


        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']
        if 'importer_id' in params:
            path_params['importerId'] = params['importer_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/datasets/{datasetId}/importers/{importerId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CrawlerConfiguration',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_configuration_template(self, importer_type, **kwargs):
        """
        List importer configuration
        Displays a list of configuration parameter of importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_configuration_template(importer_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str importer_type: The type of importer. (required)
        :return: ConfigurationTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_configuration_template_with_http_info(importer_type, **kwargs)
        else:
            (data) = self.get_configuration_template_with_http_info(importer_type, **kwargs)
            return data

    def get_configuration_template_with_http_info(self, importer_type, **kwargs):
        """
        List importer configuration
        Displays a list of configuration parameter of importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_configuration_template_with_http_info(importer_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str importer_type: The type of importer. (required)
        :return: ConfigurationTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['importer_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_configuration_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'importer_type' is set
        if ('importer_type' not in params) or (params['importer_type'] is None):
            raise ValueError("Missing the required parameter `importer_type` when calling `get_configuration_template`")


        collection_formats = {}

        path_params = {}
        if 'importer_type' in params:
            path_params['importerType'] = params['importer_type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/importer/types/{importerType}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ConfigurationTemplate',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_types(self, **kwargs):
        """
        List importer types
        Display a list of available importer types.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_types(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ListResponseConfigurationType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_types_with_http_info(**kwargs)
        else:
            (data) = self.get_types_with_http_info(**kwargs)
            return data

    def get_types_with_http_info(self, **kwargs):
        """
        List importer types
        Display a list of available importer types.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_types_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ListResponseConfigurationType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_types" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/importer/types', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListResponseConfigurationType',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list(self, dataset_id, **kwargs):
        """
        List importers
        Display a list of existing importers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list(dataset_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :return: ListResponseImporter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_with_http_info(dataset_id, **kwargs)
        else:
            (data) = self.list_with_http_info(dataset_id, **kwargs)
            return data

    def list_with_http_info(self, dataset_id, **kwargs):
        """
        List importers
        Display a list of existing importers.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_with_http_info(dataset_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :return: ListResponseImporter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params) or (params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `list`")


        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/datasets/{datasetId}/importers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListResponseImporter',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_csv(self, upload_id, **kwargs):
        """
        List CSV files
        Display a list of uploaded CSV files.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_csv(upload_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str upload_id: The ID of the upload request. (required)
        :return: UploadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_csv_with_http_info(upload_id, **kwargs)
        else:
            (data) = self.list_csv_with_http_info(upload_id, **kwargs)
            return data

    def list_csv_with_http_info(self, upload_id, **kwargs):
        """
        List CSV files
        Display a list of uploaded CSV files.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_csv_with_http_info(upload_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str upload_id: The ID of the upload request. (required)
        :return: UploadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params) or (params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `list_csv`")


        collection_formats = {}

        path_params = {}
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/importer/csv/upload/{uploadId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UploadResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def preview_csv(self, upload_id, file_name, body, **kwargs):
        """
        Preview CSV file
        Display a preview of a CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.preview_csv(upload_id, file_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str upload_id: The ID of the upload request. (required)
        :param str file_name: The name of file. (required)
        :param CrawlerConfiguration body: (required)
        :return: PreviewResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.preview_csv_with_http_info(upload_id, file_name, body, **kwargs)
        else:
            (data) = self.preview_csv_with_http_info(upload_id, file_name, body, **kwargs)
            return data

    def preview_csv_with_http_info(self, upload_id, file_name, body, **kwargs):
        """
        Preview CSV file
        Display a preview of a CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.preview_csv_with_http_info(upload_id, file_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str upload_id: The ID of the upload request. (required)
        :param str file_name: The name of file. (required)
        :param CrawlerConfiguration body: (required)
        :return: PreviewResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload_id', 'file_name', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'upload_id' is set
        if ('upload_id' not in params) or (params['upload_id'] is None):
            raise ValueError("Missing the required parameter `upload_id` when calling `preview_csv`")
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params) or (params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `preview_csv`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `preview_csv`")


        collection_formats = {}

        path_params = {}
        if 'upload_id' in params:
            path_params['uploadId'] = params['upload_id']
        if 'file_name' in params:
            path_params['fileName'] = params['file_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/importer/csv/preview/{uploadId}/{fileName}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PreviewResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def start(self, dataset_id, importer_id, **kwargs):
        """
        Start an importer
        Starts ingesting documents with an importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.start(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.start_with_http_info(dataset_id, importer_id, **kwargs)
        else:
            (data) = self.start_with_http_info(dataset_id, importer_id, **kwargs)
            return data

    def start_with_http_info(self, dataset_id, importer_id, **kwargs):
        """
        Start an importer
        Starts ingesting documents with an importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.start_with_http_info(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'importer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params) or (params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `start`")
        # verify the required parameter 'importer_id' is set
        if ('importer_id' not in params) or (params['importer_id'] is None):
            raise ValueError("Missing the required parameter `importer_id` when calling `start`")


        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']
        if 'importer_id' in params:
            path_params['importerId'] = params['importer_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/datasets/{datasetId}/importers/{importerId}/start', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def status(self, dataset_id, importer_id, **kwargs):
        """
        List importer status
        Displays status information about an existing importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.status(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: ZkIngestionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.status_with_http_info(dataset_id, importer_id, **kwargs)
        else:
            (data) = self.status_with_http_info(dataset_id, importer_id, **kwargs)
            return data

    def status_with_http_info(self, dataset_id, importer_id, **kwargs):
        """
        List importer status
        Displays status information about an existing importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.status_with_http_info(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: ZkIngestionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'importer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params) or (params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `status`")
        # verify the required parameter 'importer_id' is set
        if ('importer_id' not in params) or (params['importer_id'] is None):
            raise ValueError("Missing the required parameter `importer_id` when calling `status`")


        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']
        if 'importer_id' in params:
            path_params['importerId'] = params['importer_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/datasets/{datasetId}/importers/{importerId}/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ZkIngestionStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stop(self, dataset_id, importer_id, **kwargs):
        """
        Stop an importer
        Stops ingesting documents with an importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stop(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stop_with_http_info(dataset_id, importer_id, **kwargs)
        else:
            (data) = self.stop_with_http_info(dataset_id, importer_id, **kwargs)
            return data

    def stop_with_http_info(self, dataset_id, importer_id, **kwargs):
        """
        Stop an importer
        Stops ingesting documents with an importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stop_with_http_info(dataset_id, importer_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'importer_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params) or (params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `stop`")
        # verify the required parameter 'importer_id' is set
        if ('importer_id' not in params) or (params['importer_id'] is None):
            raise ValueError("Missing the required parameter `importer_id` when calling `stop`")


        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']
        if 'importer_id' in params:
            path_params['importerId'] = params['importer_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/datasets/{datasetId}/importers/{importerId}/stop', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update(self, dataset_id, importer_id, body, **kwargs):
        """
        Update an importer
        Updates an existing importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update(dataset_id, importer_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :param CrawlerConfiguration body: (required)
        :return: Importer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_with_http_info(dataset_id, importer_id, body, **kwargs)
        else:
            (data) = self.update_with_http_info(dataset_id, importer_id, body, **kwargs)
            return data

    def update_with_http_info(self, dataset_id, importer_id, body, **kwargs):
        """
        Update an importer
        Updates an existing importer.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_with_http_info(dataset_id, importer_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dataset_id: The ID of the dataset. (required)
        :param str importer_id: The ID of the importer. (required)
        :param CrawlerConfiguration body: (required)
        :return: Importer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'importer_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params) or (params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `update`")
        # verify the required parameter 'importer_id' is set
        if ('importer_id' not in params) or (params['importer_id'] is None):
            raise ValueError("Missing the required parameter `importer_id` when calling `update`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")


        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['datasetId'] = params['dataset_id']
        if 'importer_id' in params:
            path_params['importerId'] = params['importer_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/datasets/{datasetId}/importers/{importerId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Importer',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_csv(self, file, **kwargs):
        """
        Upload CSV file
        Upload a CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_csv(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: (required)
        :return: UploadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upload_csv_with_http_info(file, **kwargs)
        else:
            (data) = self.upload_csv_with_http_info(file, **kwargs)
            return data

    def upload_csv_with_http_info(self, file, **kwargs):
        """
        Upload CSV file
        Upload a CSV file.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_csv_with_http_info(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: (required)
        :return: UploadResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_csv`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/importer/csv/upload', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UploadResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
