# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class SimilarDocumentRankerApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cancel_model_training(self, ranker_id, model_id, **kwargs):
        """
        Cancel ranker model training task
        Cancel ranker model training task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_model_training(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cancel_model_training_with_http_info(ranker_id, model_id, **kwargs)
        else:
            (data) = self.cancel_model_training_with_http_info(ranker_id, model_id, **kwargs)
            return data

    def cancel_model_training_with_http_info(self, ranker_id, model_id, **kwargs):
        """
        Cancel ranker model training task
        Cancel ranker model training task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_model_training_with_http_info(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'model_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_model_training" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `cancel_model_training`")
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params) or (params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `cancel_model_training`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/models/{modelId}/task', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SimpleResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create(self, body, **kwargs):
        """
        Create a similar document ranker
        Create a new similar document ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InitSDRanker body: (required)
        :return: SDRanker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(body, **kwargs)
        else:
            (data) = self.create_with_http_info(body, **kwargs)
            return data

    def create_with_http_info(self, body, **kwargs):
        """
        Create a similar document ranker
        Create a new similar document ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param InitSDRanker body: (required)
        :return: SDRanker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SDRanker',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_collection(self, ranker_id, body, **kwargs):
        """
        Create and set a collection
        Create a collection to process the source dataset of the ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_collection(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param MLCollection body: (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_collection_with_http_info(ranker_id, body, **kwargs)
        else:
            (data) = self.create_collection_with_http_info(ranker_id, body, **kwargs)
            return data

    def create_collection_with_http_info(self, ranker_id, body, **kwargs):
        """
        Create and set a collection
        Create a collection to process the source dataset of the ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_collection_with_http_info(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param MLCollection body: (required)
        :return: Collection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `create_collection`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_collection`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/collection', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Collection',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_model_from_source_dataset(self, ranker_id, body, **kwargs):
        """
        Create a similar document ranker model
        Create and train a ranker model by separating the source training dataset into training, validation, and test sets Parameters used in training process can be set by adding config parameter of body *Example* For controlling training process   name | description  ---- | -----------  flag.batch_size | Int value. Batch size of examples per step  flag.max_steps | Int value. Max number of step for training  flag.val_monitor_every_n_steps |Int value. Step interval between validation  flag.val_monitor_early_stopping_rounds | Int value. Number of retry until cancel training (early stopping)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_model_from_source_dataset(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param InitDatasetConfig body: Configuration to split the source training dataset (required)
        :param str resource_name: Name of the resource set created by this method
        :param str model_name: Name of the model created by this method
        :return: ClassifierModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_model_from_source_dataset_with_http_info(ranker_id, body, **kwargs)
        else:
            (data) = self.create_model_from_source_dataset_with_http_info(ranker_id, body, **kwargs)
            return data

    def create_model_from_source_dataset_with_http_info(self, ranker_id, body, **kwargs):
        """
        Create a similar document ranker model
        Create and train a ranker model by separating the source training dataset into training, validation, and test sets Parameters used in training process can be set by adding config parameter of body *Example* For controlling training process   name | description  ---- | -----------  flag.batch_size | Int value. Batch size of examples per step  flag.max_steps | Int value. Max number of step for training  flag.val_monitor_every_n_steps |Int value. Step interval between validation  flag.val_monitor_early_stopping_rounds | Int value. Number of retry until cancel training (early stopping)
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_model_from_source_dataset_with_http_info(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param InitDatasetConfig body: Configuration to split the source training dataset (required)
        :param str resource_name: Name of the resource set created by this method
        :param str model_name: Name of the model created by this method
        :return: ClassifierModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'body', 'resource_name', 'model_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_model_from_source_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `create_model_from_source_dataset`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_model_from_source_dataset`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []
        if 'resource_name' in params:
            query_params.append(('resource-name', params['resource_name']))
        if 'model_name' in params:
            query_params.append(('model-name', params['model_name']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/models/all', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassifierModel',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete(self, ranker_id, **kwargs):
        """
        Delete a ranker
        Delete an existing ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_with_http_info(ranker_id, **kwargs)
        else:
            (data) = self.delete_with_http_info(ranker_id, **kwargs)
            return data

    def delete_with_http_info(self, ranker_id, **kwargs):
        """
        Delete a ranker
        Delete an existing ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_with_http_info(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `delete`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SimpleResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get(self, ranker_id, **kwargs):
        """
        Show similar document ranker details
        Show detailed information of an existing ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: SDRanker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_with_http_info(ranker_id, **kwargs)
        else:
            (data) = self.get_with_http_info(ranker_id, **kwargs)
            return data

    def get_with_http_info(self, ranker_id, **kwargs):
        """
        Show similar document ranker details
        Show detailed information of an existing ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_with_http_info(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: SDRanker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `get`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SDRanker',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_instances(self, ranker_id, model_id, **kwargs):
        """
        List ranker instances where the model deployed
        Show IDs of ranker instances where the specified model deployed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_instances(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: ListResponseString
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_instances_with_http_info(ranker_id, model_id, **kwargs)
        else:
            (data) = self.get_instances_with_http_info(ranker_id, model_id, **kwargs)
            return data

    def get_instances_with_http_info(self, ranker_id, model_id, **kwargs):
        """
        List ranker instances where the model deployed
        Show IDs of ranker instances where the specified model deployed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_instances_with_http_info(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: ListResponseString
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'model_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_instances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `get_instances`")
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params) or (params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `get_instances`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/models/{modelId}/instances', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListResponseString',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_instances_latest(self, ranker_id, **kwargs):
        """
        List ranker instances where the latest ranker model deployed
        Show IDs of enrichments where the latest ranker model deployed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_instances_latest(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: ListResponseString
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_instances_latest_with_http_info(ranker_id, **kwargs)
        else:
            (data) = self.get_instances_latest_with_http_info(ranker_id, **kwargs)
            return data

    def get_instances_latest_with_http_info(self, ranker_id, **kwargs):
        """
        List ranker instances where the latest ranker model deployed
        Show IDs of enrichments where the latest ranker model deployed.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_instances_latest_with_http_info(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: ListResponseString
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_instances_latest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `get_instances_latest`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/models/latest/instances', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListResponseString',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_model(self, ranker_id, model_id, **kwargs):
        """
        Show similar document ranker model details
        Show detailed information of an existing ranker model
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_model(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: ClassifierModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_model_with_http_info(ranker_id, model_id, **kwargs)
        else:
            (data) = self.get_model_with_http_info(ranker_id, model_id, **kwargs)
            return data

    def get_model_with_http_info(self, ranker_id, model_id, **kwargs):
        """
        Show similar document ranker model details
        Show detailed information of an existing ranker model
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_model_with_http_info(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: ClassifierModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'model_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `get_model`")
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params) or (params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `get_model`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/models/{modelId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassifierModel',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_model_latest(self, ranker_id, **kwargs):
        """
        Show the latest similar document ranker model details
        Show detailed information of the latest model of the ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_model_latest(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: ClassifierModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_model_latest_with_http_info(ranker_id, **kwargs)
        else:
            (data) = self.get_model_latest_with_http_info(ranker_id, **kwargs)
            return data

    def get_model_latest_with_http_info(self, ranker_id, **kwargs):
        """
        Show the latest similar document ranker model details
        Show detailed information of the latest model of the ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_model_latest_with_http_info(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: ClassifierModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_latest" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `get_model_latest`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/models/latest', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassifierModel',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_model_status(self, ranker_id, model_id, **kwargs):
        """
        Show ranker model status
        Show status of the specified ranker model
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_model_status(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: ClassifierModelStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_model_status_with_http_info(ranker_id, model_id, **kwargs)
        else:
            (data) = self.get_model_status_with_http_info(ranker_id, model_id, **kwargs)
            return data

    def get_model_status_with_http_info(self, ranker_id, model_id, **kwargs):
        """
        Show ranker model status
        Show status of the specified ranker model
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_model_status_with_http_info(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: ClassifierModelStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'model_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `get_model_status`")
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params) or (params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `get_model_status`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/models/{modelId}/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassifierModelStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_resource_set(self, ranker_id, resource_set_id, **kwargs):
        """
        Show ranker resource set details
        Show detailed information of an existing ranker resource set
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resource_set(ranker_id, resource_set_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str resource_set_id: The ID of the resource set. (required)
        :return: ResourceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_resource_set_with_http_info(ranker_id, resource_set_id, **kwargs)
        else:
            (data) = self.get_resource_set_with_http_info(ranker_id, resource_set_id, **kwargs)
            return data

    def get_resource_set_with_http_info(self, ranker_id, resource_set_id, **kwargs):
        """
        Show ranker resource set details
        Show detailed information of an existing ranker resource set
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resource_set_with_http_info(ranker_id, resource_set_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str resource_set_id: The ID of the resource set. (required)
        :return: ResourceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'resource_set_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `get_resource_set`")
        # verify the required parameter 'resource_set_id' is set
        if ('resource_set_id' not in params) or (params['resource_set_id'] is None):
            raise ValueError("Missing the required parameter `resource_set_id` when calling `get_resource_set`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']
        if 'resource_set_id' in params:
            path_params['resourceSetId'] = params['resource_set_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/resources/{resourceSetId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResourceSet',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_evals(self, ranker_id, **kwargs):
        """
        List ranking evaluation results
        List ranking evaluation results using the test dataset of all models of the specified ranker.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_evals(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: ListResponseRankerEvalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_evals_with_http_info(ranker_id, **kwargs)
        else:
            (data) = self.get_test_evals_with_http_info(ranker_id, **kwargs)
            return data

    def get_test_evals_with_http_info(self, ranker_id, **kwargs):
        """
        List ranking evaluation results
        List ranking evaluation results using the test dataset of all models of the specified ranker.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_evals_with_http_info(ranker_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :return: ListResponseRankerEvalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_evals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `get_test_evals`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/test-evals', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListResponseRankerEvalResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_test_rank_eval(self, ranker_id, model_id, **kwargs):
        """
        Show ranking evaluation result of the model
        Show ranking evaluation result of the specified ranker model using the test dataset.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_rank_eval(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: RankerEvalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_test_rank_eval_with_http_info(ranker_id, model_id, **kwargs)
        else:
            (data) = self.get_test_rank_eval_with_http_info(ranker_id, model_id, **kwargs)
            return data

    def get_test_rank_eval_with_http_info(self, ranker_id, model_id, **kwargs):
        """
        Show ranking evaluation result of the model
        Show ranking evaluation result of the specified ranker model using the test dataset.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_test_rank_eval_with_http_info(ranker_id, model_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param str model_id: The ID of the model. (required)
        :return: RankerEvalResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'model_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_rank_eval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `get_test_rank_eval`")
        # verify the required parameter 'model_id' is set
        if ('model_id' not in params) or (params['model_id'] is None):
            raise ValueError("Missing the required parameter `model_id` when calling `get_test_rank_eval`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']
        if 'model_id' in params:
            path_params['modelId'] = params['model_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/models/{modelId}/test-rank', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RankerEvalResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list(self, **kwargs):
        """
        List similar document rankers
        Display a list of existing similar document rankers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ListResponseSDRanker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_with_http_info(**kwargs)
        else:
            (data) = self.list_with_http_info(**kwargs)
            return data

    def list_with_http_info(self, **kwargs):
        """
        List similar document rankers
        Display a list of existing similar document rankers
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ListResponseSDRanker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListResponseSDRanker',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_model(self, ranker_id, body, **kwargs):
        """
        Set a similar document ranker model
        Set a ranker model to the ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_model(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param ClassifierModel body: (required)
        :return: ClassifierModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_model_with_http_info(ranker_id, body, **kwargs)
        else:
            (data) = self.set_model_with_http_info(ranker_id, body, **kwargs)
            return data

    def set_model_with_http_info(self, ranker_id, body, **kwargs):
        """
        Set a similar document ranker model
        Set a ranker model to the ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_model_with_http_info(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param ClassifierModel body: (required)
        :return: ClassifierModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `set_model`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_model`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/models', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ClassifierModel',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_resource_set(self, ranker_id, body, **kwargs):
        """
        Set a ranker resource set
        Set a ranker resource set
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_resource_set(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param ResourceSet body: (required)
        :return: ResourceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_resource_set_with_http_info(ranker_id, body, **kwargs)
        else:
            (data) = self.set_resource_set_with_http_info(ranker_id, body, **kwargs)
            return data

    def set_resource_set_with_http_info(self, ranker_id, body, **kwargs):
        """
        Set a ranker resource set
        Set a ranker resource set
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_resource_set_with_http_info(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param ResourceSet body: (required)
        :return: ResourceSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_resource_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `set_resource_set`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_resource_set`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}/resources', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResourceSet',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update(self, ranker_id, body, **kwargs):
        """
        Update a similar document ranker
        Update an existing ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param SDRanker body: (required)
        :return: SDRanker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_with_http_info(ranker_id, body, **kwargs)
        else:
            (data) = self.update_with_http_info(ranker_id, body, **kwargs)
            return data

    def update_with_http_info(self, ranker_id, body, **kwargs):
        """
        Update a similar document ranker
        Update an existing ranker
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_with_http_info(ranker_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str ranker_id: The ID of the ranker. (required)
        :param SDRanker body: (required)
        :return: SDRanker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ranker_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ranker_id' is set
        if ('ranker_id' not in params) or (params['ranker_id'] is None):
            raise ValueError("Missing the required parameter `ranker_id` when calling `update`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")


        collection_formats = {}

        path_params = {}
        if 'ranker_id' in params:
            path_params['rankerId'] = params['ranker_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/sdrankers/{rankerId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SDRanker',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
