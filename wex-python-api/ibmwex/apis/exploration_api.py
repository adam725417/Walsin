# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ExplorationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def query(self, collection_id, q, **kwargs):
        """
        Searches for documents
        Query syntax is based on [Apache Solr's Extended Dismax Query Parser](https://lucene.apache.org/solr/guide/7_3/the-extended-dismax-query-parser.html). Query response writer 'csv_facet' also use parameter in [CSV Parameters](https://lucene.apache.org/solr/guide/7_3/response-writers.html#csv-parameters) except csv.header and csv.null. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query(collection_id, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str collection_id: The ID of the collection. (required)
        :param str q: Query string (required)
        :param int start: Position of the first result to return
        :param int rows: Determines the number of results to return for a single request
        :param str lang: Language used to analyze the query string.
        :param str sort: Specifies sort fields of search results in either ascending (asc) or descending (desc) order. For example, \"genre asc, price asc\" sorts by the contents of the genre field in descending order, then within those results sorts in ascending order by the contents of the price field. By default, relevancy is used as the only sort key.
        :param str fl: Specifies the information included in a query response to a list of fields. Fields should be separated by commas.
        :param str facet: Flag to return facets or not.
        :param list[str] facet_field: Facet names to return.
        :param str facet_stats: Facet statistics to be returned.
        :param int facet_limit: Number of facet values to return for each facet field.
        :param str rq: Specify query string used for result re-ranking. For example, to enable structured simlar document search, specify \"{!sss}\".
        :param str qdocid: Specify an existing indexed document id for similar document search.
        :param str qdoc: Specify a document JSON for similar document search. The format of searched document must be compliant to NLP API format.
        :param str wt: Type of [QueryResponseWriter](https://wiki.apache.org/solr/QueryResponseWriter)
        :param bool facet_sentiment: Enable sentiment analysis if available
        :param list[str] csv_facet_attr: wt=csv_facet only: Limitting table of facet attributes. By default, export everything. ```sentiment_*``` only available if ```facet.sentiment``` is enabled. 
        :param str csv_comment: wt=csv_facet only: Comment character in CSV file. By default, no comments will be in CSV file. 
        :param str rapi_file_encoding: wt=csv_facet only: Encoding of CSV file. Default is UTF-8 
        :param str rapi_file_name: wt=csv_facet only: Additional response header will be added. ```Content-Disposition: attachment;filename=\"rapi.file.name\"``` 
        :param str date_format: wt=csv_facet only: Valid pattern of ```java.time.format.DateTimeFormatter``` 
        :param str tz: Valid time zone of ```java.time.ZoneId```
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.query_with_http_info(collection_id, q, **kwargs)
        else:
            (data) = self.query_with_http_info(collection_id, q, **kwargs)
            return data

    def query_with_http_info(self, collection_id, q, **kwargs):
        """
        Searches for documents
        Query syntax is based on [Apache Solr's Extended Dismax Query Parser](https://lucene.apache.org/solr/guide/7_3/the-extended-dismax-query-parser.html). Query response writer 'csv_facet' also use parameter in [CSV Parameters](https://lucene.apache.org/solr/guide/7_3/response-writers.html#csv-parameters) except csv.header and csv.null. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.query_with_http_info(collection_id, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str collection_id: The ID of the collection. (required)
        :param str q: Query string (required)
        :param int start: Position of the first result to return
        :param int rows: Determines the number of results to return for a single request
        :param str lang: Language used to analyze the query string.
        :param str sort: Specifies sort fields of search results in either ascending (asc) or descending (desc) order. For example, \"genre asc, price asc\" sorts by the contents of the genre field in descending order, then within those results sorts in ascending order by the contents of the price field. By default, relevancy is used as the only sort key.
        :param str fl: Specifies the information included in a query response to a list of fields. Fields should be separated by commas.
        :param str facet: Flag to return facets or not.
        :param list[str] facet_field: Facet names to return.
        :param str facet_stats: Facet statistics to be returned.
        :param int facet_limit: Number of facet values to return for each facet field.
        :param str rq: Specify query string used for result re-ranking. For example, to enable structured simlar document search, specify \"{!sss}\".
        :param str qdocid: Specify an existing indexed document id for similar document search.
        :param str qdoc: Specify a document JSON for similar document search. The format of searched document must be compliant to NLP API format.
        :param str wt: Type of [QueryResponseWriter](https://wiki.apache.org/solr/QueryResponseWriter)
        :param bool facet_sentiment: Enable sentiment analysis if available
        :param list[str] csv_facet_attr: wt=csv_facet only: Limitting table of facet attributes. By default, export everything. ```sentiment_*``` only available if ```facet.sentiment``` is enabled. 
        :param str csv_comment: wt=csv_facet only: Comment character in CSV file. By default, no comments will be in CSV file. 
        :param str rapi_file_encoding: wt=csv_facet only: Encoding of CSV file. Default is UTF-8 
        :param str rapi_file_name: wt=csv_facet only: Additional response header will be added. ```Content-Disposition: attachment;filename=\"rapi.file.name\"``` 
        :param str date_format: wt=csv_facet only: Valid pattern of ```java.time.format.DateTimeFormatter``` 
        :param str tz: Valid time zone of ```java.time.ZoneId```
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'q', 'start', 'rows', 'lang', 'sort', 'fl', 'facet', 'facet_field', 'facet_stats', 'facet_limit', 'rq', 'qdocid', 'qdoc', 'wt', 'facet_sentiment', 'csv_facet_attr', 'csv_comment', 'rapi_file_encoding', 'rapi_file_name', 'date_format', 'tz']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `query`")
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `query`")

        if 'start' in params and params['start'] < 0:
            raise ValueError("Invalid value for parameter `start` when calling `query`, must be a value greater than or equal to `0`")
        if 'rows' in params and params['rows'] > 1250:
            raise ValueError("Invalid value for parameter `rows` when calling `query`, must be a value less than or equal to `1250`")
        if 'rows' in params and params['rows'] < 0:
            raise ValueError("Invalid value for parameter `rows` when calling `query`, must be a value greater than or equal to `0`")
        if 'facet_limit' in params and params['facet_limit'] > 500:
            raise ValueError("Invalid value for parameter `facet_limit` when calling `query`, must be a value less than or equal to `500`")
        if 'facet_limit' in params and params['facet_limit'] < 0:
            raise ValueError("Invalid value for parameter `facet_limit` when calling `query`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collectionId'] = params['collection_id']

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'start' in params:
            query_params.append(('start', params['start']))
        if 'rows' in params:
            query_params.append(('rows', params['rows']))
        if 'lang' in params:
            query_params.append(('lang', params['lang']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'fl' in params:
            query_params.append(('fl', params['fl']))
        if 'facet' in params:
            query_params.append(('facet', params['facet']))
        if 'facet_field' in params:
            query_params.append(('facet.field', params['facet_field']))
            collection_formats['facet.field'] = 'multi'
        if 'facet_stats' in params:
            query_params.append(('facet.stats', params['facet_stats']))
        if 'facet_limit' in params:
            query_params.append(('facet.limit', params['facet_limit']))
        if 'rq' in params:
            query_params.append(('rq', params['rq']))
        if 'qdocid' in params:
            query_params.append(('qdocid', params['qdocid']))
        if 'qdoc' in params:
            query_params.append(('qdoc', params['qdoc']))
        if 'wt' in params:
            query_params.append(('wt', params['wt']))
        if 'facet_sentiment' in params:
            query_params.append(('facet.sentiment', params['facet_sentiment']))
        if 'csv_facet_attr' in params:
            query_params.append(('csv_facet.attr', params['csv_facet_attr']))
            collection_formats['csv_facet.attr'] = 'csv'
        if 'csv_comment' in params:
            query_params.append(('csv.comment', params['csv_comment']))
        if 'rapi_file_encoding' in params:
            query_params.append(('rapi.file.encoding', params['rapi_file_encoding']))
        if 'rapi_file_name' in params:
            query_params.append(('rapi.file.name', params['rapi_file_name']))
        if 'date_format' in params:
            query_params.append(('date.format', params['date_format']))
        if 'tz' in params:
            query_params.append(('TZ', params['tz']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/explore/{collectionId}/query', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='QueryResult',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def querymodifier(self, collection_id, q, **kwargs):
        """
        Searches for documents
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.querymodifier(collection_id, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str collection_id: The ID of the collection. (required)
        :param str q: Query string to be modified (required)
        :param str lang: Language used to analyze the query string
        :param int querymodifier_minimum_required_terms: Threshold to converts AND operators into OR operators, if the modified query has more terms than this threshold
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.querymodifier_with_http_info(collection_id, q, **kwargs)
        else:
            (data) = self.querymodifier_with_http_info(collection_id, q, **kwargs)
            return data

    def querymodifier_with_http_info(self, collection_id, q, **kwargs):
        """
        Searches for documents
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.querymodifier_with_http_info(collection_id, q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str collection_id: The ID of the collection. (required)
        :param str q: Query string to be modified (required)
        :param str lang: Language used to analyze the query string
        :param int querymodifier_minimum_required_terms: Threshold to converts AND operators into OR operators, if the modified query has more terms than this threshold
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['collection_id', 'q', 'lang', 'querymodifier_minimum_required_terms']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method querymodifier" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'collection_id' is set
        if ('collection_id' not in params) or (params['collection_id'] is None):
            raise ValueError("Missing the required parameter `collection_id` when calling `querymodifier`")
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `querymodifier`")


        collection_formats = {}

        path_params = {}
        if 'collection_id' in params:
            path_params['collectionId'] = params['collection_id']

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'lang' in params:
            query_params.append(('lang', params['lang']))
        if 'querymodifier_minimum_required_terms' in params:
            query_params.append(('querymodifier.minimumRequiredTerms', params['querymodifier_minimum_required_terms']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/explore/{collectionId}/querymodifier', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
