# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EnrichmentApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create(self, body, **kwargs):
        """
        Create an enrichment
        Creates a new enrichment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Enrichment body: (required)
        :return: Enrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_with_http_info(body, **kwargs)
        else:
            (data) = self.create_with_http_info(body, **kwargs)
            return data

    def create_with_http_info(self, body, **kwargs):
        """
        Create an enrichment
        Creates a new enrichment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Enrichment body: (required)
        :return: Enrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Enrichment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_facet_dictionary(self, enrichment_id, body, **kwargs):
        """
        Create a dictionary
        Creates a new dictionary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_facet_dictionary(enrichment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param FileResource body: (required)
        :return: FileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_facet_dictionary_with_http_info(enrichment_id, body, **kwargs)
        else:
            (data) = self.create_facet_dictionary_with_http_info(enrichment_id, body, **kwargs)
            return data

    def create_facet_dictionary_with_http_info(self, enrichment_id, body, **kwargs):
        """
        Create a dictionary
        Creates a new dictionary
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_facet_dictionary_with_http_info(enrichment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param FileResource body: (required)
        :return: FileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_facet_dictionary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `create_facet_dictionary`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_facet_dictionary`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}/fdics', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FileResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_from_pear(self, file, **kwargs):
        """
        Create an enrichment from pear file
        Create a new enrichment from pear file created by Studio.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_from_pear(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: (required)
        :param str name:
        :return: Enrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_from_pear_with_http_info(file, **kwargs)
        else:
            (data) = self.create_from_pear_with_http_info(file, **kwargs)
            return data

    def create_from_pear_with_http_info(self, file, **kwargs):
        """
        Create an enrichment from pear file
        Create a new enrichment from pear file created by Studio.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_from_pear_with_http_info(file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file: (required)
        :param str name:
        :return: Enrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_from_pear" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `create_from_pear`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']
        if 'name' in params:
            form_params.append(('name', params['name']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments#pear', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Enrichment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete(self, enrichment_id, **kwargs):
        """
        Delete an enrichment
        Deletes an existing enrichment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete(enrichment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_with_http_info(enrichment_id, **kwargs)
        else:
            (data) = self.delete_with_http_info(enrichment_id, **kwargs)
            return data

    def delete_with_http_info(self, enrichment_id, **kwargs):
        """
        Delete an enrichment
        Deletes an existing enrichment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_with_http_info(enrichment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `delete`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SimpleResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get(self, enrichment_id, **kwargs):
        """
        List enrichment details
        Display detailed information about an existing enrichment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get(enrichment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :return: Enrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_with_http_info(enrichment_id, **kwargs)
        else:
            (data) = self.get_with_http_info(enrichment_id, **kwargs)
            return data

    def get_with_http_info(self, enrichment_id, **kwargs):
        """
        List enrichment details
        Display detailed information about an existing enrichment.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_with_http_info(enrichment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :return: Enrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `get`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Enrichment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_facet_dictionary(self, enrichment_id, dictionary_id, **kwargs):
        """
        List dictionary details
        Display detailed information about an existing dictionary.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_facet_dictionary(enrichment_id, dictionary_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :return: FileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_facet_dictionary_with_http_info(enrichment_id, dictionary_id, **kwargs)
        else:
            (data) = self.get_facet_dictionary_with_http_info(enrichment_id, dictionary_id, **kwargs)
            return data

    def get_facet_dictionary_with_http_info(self, enrichment_id, dictionary_id, **kwargs):
        """
        List dictionary details
        Display detailed information about an existing dictionary.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_facet_dictionary_with_http_info(enrichment_id, dictionary_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :return: FileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id', 'dictionary_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_facet_dictionary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `get_facet_dictionary`")
        # verify the required parameter 'dictionary_id' is set
        if ('dictionary_id' not in params) or (params['dictionary_id'] is None):
            raise ValueError("Missing the required parameter `dictionary_id` when calling `get_facet_dictionary`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']
        if 'dictionary_id' in params:
            path_params['dictionaryId'] = params['dictionary_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}/fdics/{dictionaryId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FileResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_facet_dictionary_content(self, enrichment_id, dictionary_id, **kwargs):
        """
        Fetch a dictionary content
        Fetches a content of an existing dictionary.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_facet_dictionary_content(enrichment_id, dictionary_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :return: FacetDictionary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_facet_dictionary_content_with_http_info(enrichment_id, dictionary_id, **kwargs)
        else:
            (data) = self.get_facet_dictionary_content_with_http_info(enrichment_id, dictionary_id, **kwargs)
            return data

    def get_facet_dictionary_content_with_http_info(self, enrichment_id, dictionary_id, **kwargs):
        """
        Fetch a dictionary content
        Fetches a content of an existing dictionary.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_facet_dictionary_content_with_http_info(enrichment_id, dictionary_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :return: FacetDictionary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id', 'dictionary_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_facet_dictionary_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `get_facet_dictionary_content`")
        # verify the required parameter 'dictionary_id' is set
        if ('dictionary_id' not in params) or (params['dictionary_id'] is None):
            raise ValueError("Missing the required parameter `dictionary_id` when calling `get_facet_dictionary_content`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']
        if 'dictionary_id' in params:
            path_params['dictionaryId'] = params['dictionary_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}/fdics/{dictionaryId}/content', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FacetDictionary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_reg_ex_config(self, enrichment_id, **kwargs):
        """
        Get the regular expression annotator rules
        Get the regular expression annotator rules, the enrichment must be in type regex
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reg_ex_config(enrichment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :return: RegExConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_reg_ex_config_with_http_info(enrichment_id, **kwargs)
        else:
            (data) = self.get_reg_ex_config_with_http_info(enrichment_id, **kwargs)
            return data

    def get_reg_ex_config_with_http_info(self, enrichment_id, **kwargs):
        """
        Get the regular expression annotator rules
        Get the regular expression annotator rules, the enrichment must be in type regex
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_reg_ex_config_with_http_info(enrichment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :return: RegExConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reg_ex_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `get_reg_ex_config`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}/regexconfig', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RegExConfig',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list(self, **kwargs):
        """
        List enrichments
        Display a list of existing enrichments.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ListResponseEnrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_with_http_info(**kwargs)
        else:
            (data) = self.list_with_http_info(**kwargs)
            return data

    def list_with_http_info(self, **kwargs):
        """
        List enrichments
        Display a list of existing enrichments.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ListResponseEnrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListResponseEnrichment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_facet_dictionaries(self, enrichment_id, **kwargs):
        """
        List dictionaries
        Display a list of IDs of existing dictionaries.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_facet_dictionaries(enrichment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :return: ListResponseFileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_facet_dictionaries_with_http_info(enrichment_id, **kwargs)
        else:
            (data) = self.list_facet_dictionaries_with_http_info(enrichment_id, **kwargs)
            return data

    def list_facet_dictionaries_with_http_info(self, enrichment_id, **kwargs):
        """
        List dictionaries
        Display a list of IDs of existing dictionaries.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_facet_dictionaries_with_http_info(enrichment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :return: ListResponseFileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_facet_dictionaries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `list_facet_dictionaries`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}/fdics', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListResponseFileResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def remove_facet_dictionary(self, enrichment_id, dictionary_id, **kwargs):
        """
        Remove a dictionary
        Removes an existing dictionary from collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_facet_dictionary(enrichment_id, dictionary_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.remove_facet_dictionary_with_http_info(enrichment_id, dictionary_id, **kwargs)
        else:
            (data) = self.remove_facet_dictionary_with_http_info(enrichment_id, dictionary_id, **kwargs)
            return data

    def remove_facet_dictionary_with_http_info(self, enrichment_id, dictionary_id, **kwargs):
        """
        Remove a dictionary
        Removes an existing dictionary from collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_facet_dictionary_with_http_info(enrichment_id, dictionary_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :return: SimpleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id', 'dictionary_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_facet_dictionary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `remove_facet_dictionary`")
        # verify the required parameter 'dictionary_id' is set
        if ('dictionary_id' not in params) or (params['dictionary_id'] is None):
            raise ValueError("Missing the required parameter `dictionary_id` when calling `remove_facet_dictionary`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']
        if 'dictionary_id' in params:
            path_params['dictionaryId'] = params['dictionary_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}/fdics/{dictionaryId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SimpleResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update(self, enrichment_id, body, **kwargs):
        """
        Update an enrichment
        Updates an existing enrichment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update(enrichment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param Enrichment body: (required)
        :return: Enrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_with_http_info(enrichment_id, body, **kwargs)
        else:
            (data) = self.update_with_http_info(enrichment_id, body, **kwargs)
            return data

    def update_with_http_info(self, enrichment_id, body, **kwargs):
        """
        Update an enrichment
        Updates an existing enrichment
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_with_http_info(enrichment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param Enrichment body: (required)
        :return: Enrichment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `update`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Enrichment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_facet_dictionary(self, enrichment_id, dictionary_id, body, **kwargs):
        """
        Update a dictionary
        Updates an existing dictionary of collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_facet_dictionary(enrichment_id, dictionary_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :param FileResource body: (required)
        :return: FileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_facet_dictionary_with_http_info(enrichment_id, dictionary_id, body, **kwargs)
        else:
            (data) = self.update_facet_dictionary_with_http_info(enrichment_id, dictionary_id, body, **kwargs)
            return data

    def update_facet_dictionary_with_http_info(self, enrichment_id, dictionary_id, body, **kwargs):
        """
        Update a dictionary
        Updates an existing dictionary of collection.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_facet_dictionary_with_http_info(enrichment_id, dictionary_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :param FileResource body: (required)
        :return: FileResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id', 'dictionary_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_facet_dictionary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `update_facet_dictionary`")
        # verify the required parameter 'dictionary_id' is set
        if ('dictionary_id' not in params) or (params['dictionary_id'] is None):
            raise ValueError("Missing the required parameter `dictionary_id` when calling `update_facet_dictionary`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_facet_dictionary`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']
        if 'dictionary_id' in params:
            path_params['dictionaryId'] = params['dictionary_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}/fdics/{dictionaryId}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FileResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_facet_dictionary_content(self, enrichment_id, dictionary_id, body, **kwargs):
        """
        Update a dictionary content
        Updates a content of an existing dictionary.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_facet_dictionary_content(enrichment_id, dictionary_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :param FacetDictionary body: (required)
        :return: FacetDictionary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_facet_dictionary_content_with_http_info(enrichment_id, dictionary_id, body, **kwargs)
        else:
            (data) = self.update_facet_dictionary_content_with_http_info(enrichment_id, dictionary_id, body, **kwargs)
            return data

    def update_facet_dictionary_content_with_http_info(self, enrichment_id, dictionary_id, body, **kwargs):
        """
        Update a dictionary content
        Updates a content of an existing dictionary.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_facet_dictionary_content_with_http_info(enrichment_id, dictionary_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param str dictionary_id: The ID of the dictionary. (required)
        :param FacetDictionary body: (required)
        :return: FacetDictionary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id', 'dictionary_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_facet_dictionary_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `update_facet_dictionary_content`")
        # verify the required parameter 'dictionary_id' is set
        if ('dictionary_id' not in params) or (params['dictionary_id'] is None):
            raise ValueError("Missing the required parameter `dictionary_id` when calling `update_facet_dictionary_content`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_facet_dictionary_content`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']
        if 'dictionary_id' in params:
            path_params['dictionaryId'] = params['dictionary_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}/fdics/{dictionaryId}/content', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='FacetDictionary',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_reg_ex_config(self, enrichment_id, body, **kwargs):
        """
        Create or update regular expression annotator rules
        Create or update regular expression annotator rules, the enrichment must be in type regex
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_reg_ex_config(enrichment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param RegExConfig body: (required)
        :return: RegExConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_reg_ex_config_with_http_info(enrichment_id, body, **kwargs)
        else:
            (data) = self.update_reg_ex_config_with_http_info(enrichment_id, body, **kwargs)
            return data

    def update_reg_ex_config_with_http_info(self, enrichment_id, body, **kwargs):
        """
        Create or update regular expression annotator rules
        Create or update regular expression annotator rules, the enrichment must be in type regex
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_reg_ex_config_with_http_info(enrichment_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str enrichment_id: The ID of the enrichment. (required)
        :param RegExConfig body: (required)
        :return: RegExConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrichment_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_reg_ex_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'enrichment_id' is set
        if ('enrichment_id' not in params) or (params['enrichment_id'] is None):
            raise ValueError("Missing the required parameter `enrichment_id` when calling `update_reg_ex_config`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_reg_ex_config`")


        collection_formats = {}

        path_params = {}
        if 'enrichment_id' in params:
            path_params['enrichmentId'] = params['enrichment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['basicAuth']

        return self.api_client.call_api('/api/v1/enrichments/{enrichmentId}/regexconfig', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RegExConfig',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
