# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IngestionStatusSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_docs': 'int',
        'dataset_id': 'str',
        'last_dataset_update': 'int',
        'state': 'str',
        'status': 'str',
        'zk_ingestion_status': 'list[ZkIngestionStatus]'
    }

    attribute_map = {
        'num_docs': 'numDocs',
        'dataset_id': 'datasetID',
        'last_dataset_update': 'lastDatasetUpdate',
        'state': 'state',
        'status': 'status',
        'zk_ingestion_status': 'zkIngestionStatus'
    }

    def __init__(self, num_docs=None, dataset_id=None, last_dataset_update=None, state=None, status=None, zk_ingestion_status=None):
        """
        IngestionStatusSummary - a model defined in Swagger
        """

        self._num_docs = None
        self._dataset_id = None
        self._last_dataset_update = None
        self._state = None
        self._status = None
        self._zk_ingestion_status = None

        if num_docs is not None:
          self.num_docs = num_docs
        if dataset_id is not None:
          self.dataset_id = dataset_id
        if last_dataset_update is not None:
          self.last_dataset_update = last_dataset_update
        if state is not None:
          self.state = state
        if status is not None:
          self.status = status
        if zk_ingestion_status is not None:
          self.zk_ingestion_status = zk_ingestion_status

    @property
    def num_docs(self):
        """
        Gets the num_docs of this IngestionStatusSummary.

        :return: The num_docs of this IngestionStatusSummary.
        :rtype: int
        """
        return self._num_docs

    @num_docs.setter
    def num_docs(self, num_docs):
        """
        Sets the num_docs of this IngestionStatusSummary.

        :param num_docs: The num_docs of this IngestionStatusSummary.
        :type: int
        """

        self._num_docs = num_docs

    @property
    def dataset_id(self):
        """
        Gets the dataset_id of this IngestionStatusSummary.

        :return: The dataset_id of this IngestionStatusSummary.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """
        Sets the dataset_id of this IngestionStatusSummary.

        :param dataset_id: The dataset_id of this IngestionStatusSummary.
        :type: str
        """

        self._dataset_id = dataset_id

    @property
    def last_dataset_update(self):
        """
        Gets the last_dataset_update of this IngestionStatusSummary.

        :return: The last_dataset_update of this IngestionStatusSummary.
        :rtype: int
        """
        return self._last_dataset_update

    @last_dataset_update.setter
    def last_dataset_update(self, last_dataset_update):
        """
        Sets the last_dataset_update of this IngestionStatusSummary.

        :param last_dataset_update: The last_dataset_update of this IngestionStatusSummary.
        :type: int
        """

        self._last_dataset_update = last_dataset_update

    @property
    def state(self):
        """
        Gets the state of this IngestionStatusSummary.

        :return: The state of this IngestionStatusSummary.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this IngestionStatusSummary.

        :param state: The state of this IngestionStatusSummary.
        :type: str
        """

        self._state = state

    @property
    def status(self):
        """
        Gets the status of this IngestionStatusSummary.

        :return: The status of this IngestionStatusSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this IngestionStatusSummary.

        :param status: The status of this IngestionStatusSummary.
        :type: str
        """
        allowed_values = ["NotStarted", "Started", "Running", "Stopped", "Completed", "Errored"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def zk_ingestion_status(self):
        """
        Gets the zk_ingestion_status of this IngestionStatusSummary.

        :return: The zk_ingestion_status of this IngestionStatusSummary.
        :rtype: list[ZkIngestionStatus]
        """
        return self._zk_ingestion_status

    @zk_ingestion_status.setter
    def zk_ingestion_status(self, zk_ingestion_status):
        """
        Sets the zk_ingestion_status of this IngestionStatusSummary.

        :param zk_ingestion_status: The zk_ingestion_status of this IngestionStatusSummary.
        :type: list[ZkIngestionStatus]
        """

        self._zk_ingestion_status = zk_ingestion_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IngestionStatusSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
