# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Dataset(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_field_format': 'DateFieldFormat',
        'description': 'str',
        'fields': 'list[Field]',
        'id': 'str',
        'mapped_fields': 'dict(str, dict(str, str))',
        'metadata': 'Metadata',
        'name': 'str',
        'native_fields': 'dict(str, list[Field])',
        'tags': 'dict(str, object)'
    }

    attribute_map = {
        'date_field_format': 'dateFieldFormat',
        'description': 'description',
        'fields': 'fields',
        'id': 'id',
        'mapped_fields': 'mappedFields',
        'metadata': 'metadata',
        'name': 'name',
        'native_fields': 'nativeFields',
        'tags': 'tags'
    }

    def __init__(self, date_field_format=None, description=None, fields=None, id=None, mapped_fields=None, metadata=None, name=None, native_fields=None, tags=None):
        """
        Dataset - a model defined in Swagger
        """

        self._date_field_format = None
        self._description = None
        self._fields = None
        self._id = None
        self._mapped_fields = None
        self._metadata = None
        self._name = None
        self._native_fields = None
        self._tags = None

        if date_field_format is not None:
          self.date_field_format = date_field_format
        if description is not None:
          self.description = description
        if fields is not None:
          self.fields = fields
        if id is not None:
          self.id = id
        if mapped_fields is not None:
          self.mapped_fields = mapped_fields
        if metadata is not None:
          self.metadata = metadata
        if name is not None:
          self.name = name
        if native_fields is not None:
          self.native_fields = native_fields
        if tags is not None:
          self.tags = tags

    @property
    def date_field_format(self):
        """
        Gets the date_field_format of this Dataset.

        :return: The date_field_format of this Dataset.
        :rtype: DateFieldFormat
        """
        return self._date_field_format

    @date_field_format.setter
    def date_field_format(self, date_field_format):
        """
        Sets the date_field_format of this Dataset.

        :param date_field_format: The date_field_format of this Dataset.
        :type: DateFieldFormat
        """

        self._date_field_format = date_field_format

    @property
    def description(self):
        """
        Gets the description of this Dataset.

        :return: The description of this Dataset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Dataset.

        :param description: The description of this Dataset.
        :type: str
        """

        self._description = description

    @property
    def fields(self):
        """
        Gets the fields of this Dataset.

        :return: The fields of this Dataset.
        :rtype: list[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this Dataset.

        :param fields: The fields of this Dataset.
        :type: list[Field]
        """

        self._fields = fields

    @property
    def id(self):
        """
        Gets the id of this Dataset.

        :return: The id of this Dataset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Dataset.

        :param id: The id of this Dataset.
        :type: str
        """

        self._id = id

    @property
    def mapped_fields(self):
        """
        Gets the mapped_fields of this Dataset.

        :return: The mapped_fields of this Dataset.
        :rtype: dict(str, dict(str, str))
        """
        return self._mapped_fields

    @mapped_fields.setter
    def mapped_fields(self, mapped_fields):
        """
        Sets the mapped_fields of this Dataset.

        :param mapped_fields: The mapped_fields of this Dataset.
        :type: dict(str, dict(str, str))
        """

        self._mapped_fields = mapped_fields

    @property
    def metadata(self):
        """
        Gets the metadata of this Dataset.

        :return: The metadata of this Dataset.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this Dataset.

        :param metadata: The metadata of this Dataset.
        :type: Metadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """
        Gets the name of this Dataset.

        :return: The name of this Dataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Dataset.

        :param name: The name of this Dataset.
        :type: str
        """

        self._name = name

    @property
    def native_fields(self):
        """
        Gets the native_fields of this Dataset.

        :return: The native_fields of this Dataset.
        :rtype: dict(str, list[Field])
        """
        return self._native_fields

    @native_fields.setter
    def native_fields(self, native_fields):
        """
        Sets the native_fields of this Dataset.

        :param native_fields: The native_fields of this Dataset.
        :type: dict(str, list[Field])
        """

        self._native_fields = native_fields

    @property
    def tags(self):
        """
        Gets the tags of this Dataset.

        :return: The tags of this Dataset.
        :rtype: dict(str, object)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Dataset.

        :param tags: The tags of this Dataset.
        :type: dict(str, object)
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Dataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
