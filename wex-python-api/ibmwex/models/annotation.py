# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Annotation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'text': 'str',
        'begin_index': 'int',
        'end_index': 'int',
        'properties': 'object'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'text': 'text',
        'begin_index': 'beginIndex',
        'end_index': 'endIndex',
        'properties': 'properties'
    }

    def __init__(self, id=None, type=None, text=None, begin_index=None, end_index=None, properties=None):
        """
        Annotation - a model defined in Swagger
        """

        self._id = None
        self._type = None
        self._text = None
        self._begin_index = None
        self._end_index = None
        self._properties = None

        if id is not None:
          self.id = id
        if type is not None:
          self.type = type
        if text is not None:
          self.text = text
        if begin_index is not None:
          self.begin_index = begin_index
        if end_index is not None:
          self.end_index = end_index
        if properties is not None:
          self.properties = properties

    @property
    def id(self):
        """
        Gets the id of this Annotation.

        :return: The id of this Annotation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Annotation.

        :param id: The id of this Annotation.
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """
        Gets the type of this Annotation.

        :return: The type of this Annotation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Annotation.

        :param type: The type of this Annotation.
        :type: str
        """

        self._type = type

    @property
    def text(self):
        """
        Gets the text of this Annotation.

        :return: The text of this Annotation.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this Annotation.

        :param text: The text of this Annotation.
        :type: str
        """

        self._text = text

    @property
    def begin_index(self):
        """
        Gets the begin_index of this Annotation.

        :return: The begin_index of this Annotation.
        :rtype: int
        """
        return self._begin_index

    @begin_index.setter
    def begin_index(self, begin_index):
        """
        Sets the begin_index of this Annotation.

        :param begin_index: The begin_index of this Annotation.
        :type: int
        """

        self._begin_index = begin_index

    @property
    def end_index(self):
        """
        Gets the end_index of this Annotation.

        :return: The end_index of this Annotation.
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """
        Sets the end_index of this Annotation.

        :param end_index: The end_index of this Annotation.
        :type: int
        """

        self._end_index = end_index

    @property
    def properties(self):
        """
        Gets the properties of this Annotation.

        :return: The properties of this Annotation.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this Annotation.

        :param properties: The properties of this Annotation.
        :type: object
        """

        self._properties = properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Annotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
