# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CrawlerConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crawler_type': 'str',
        'crawl_settings': 'object',
        'crawlspace_settings': 'list[object]',
        'datasource_settings': 'object',
        'general_settings': 'object',
        'plugin_settings': 'object',
        'schedules': 'list[Schedule]'
    }

    attribute_map = {
        'crawler_type': 'crawlerType',
        'crawl_settings': 'crawl_settings',
        'crawlspace_settings': 'crawlspace_settings',
        'datasource_settings': 'datasource_settings',
        'general_settings': 'general_settings',
        'plugin_settings': 'plugin_settings',
        'schedules': 'schedules'
    }

    def __init__(self, crawler_type=None, crawl_settings=None, crawlspace_settings=None, datasource_settings=None, general_settings=None, plugin_settings=None, schedules=None):
        """
        CrawlerConfiguration - a model defined in Swagger
        """

        self._crawler_type = None
        self._crawl_settings = None
        self._crawlspace_settings = None
        self._datasource_settings = None
        self._general_settings = None
        self._plugin_settings = None
        self._schedules = None

        if crawler_type is not None:
          self.crawler_type = crawler_type
        if crawl_settings is not None:
          self.crawl_settings = crawl_settings
        if crawlspace_settings is not None:
          self.crawlspace_settings = crawlspace_settings
        if datasource_settings is not None:
          self.datasource_settings = datasource_settings
        if general_settings is not None:
          self.general_settings = general_settings
        if plugin_settings is not None:
          self.plugin_settings = plugin_settings
        if schedules is not None:
          self.schedules = schedules

    @property
    def crawler_type(self):
        """
        Gets the crawler_type of this CrawlerConfiguration.

        :return: The crawler_type of this CrawlerConfiguration.
        :rtype: str
        """
        return self._crawler_type

    @crawler_type.setter
    def crawler_type(self, crawler_type):
        """
        Sets the crawler_type of this CrawlerConfiguration.

        :param crawler_type: The crawler_type of this CrawlerConfiguration.
        :type: str
        """

        self._crawler_type = crawler_type

    @property
    def crawl_settings(self):
        """
        Gets the crawl_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :return: The crawl_settings of this CrawlerConfiguration.
        :rtype: object
        """
        return self._crawl_settings

    @crawl_settings.setter
    def crawl_settings(self, crawl_settings):
        """
        Sets the crawl_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :param crawl_settings: The crawl_settings of this CrawlerConfiguration.
        :type: object
        """

        self._crawl_settings = crawl_settings

    @property
    def crawlspace_settings(self):
        """
        Gets the crawlspace_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :return: The crawlspace_settings of this CrawlerConfiguration.
        :rtype: list[object]
        """
        return self._crawlspace_settings

    @crawlspace_settings.setter
    def crawlspace_settings(self, crawlspace_settings):
        """
        Sets the crawlspace_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :param crawlspace_settings: The crawlspace_settings of this CrawlerConfiguration.
        :type: list[object]
        """

        self._crawlspace_settings = crawlspace_settings

    @property
    def datasource_settings(self):
        """
        Gets the datasource_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :return: The datasource_settings of this CrawlerConfiguration.
        :rtype: object
        """
        return self._datasource_settings

    @datasource_settings.setter
    def datasource_settings(self, datasource_settings):
        """
        Sets the datasource_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :param datasource_settings: The datasource_settings of this CrawlerConfiguration.
        :type: object
        """

        self._datasource_settings = datasource_settings

    @property
    def general_settings(self):
        """
        Gets the general_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :return: The general_settings of this CrawlerConfiguration.
        :rtype: object
        """
        return self._general_settings

    @general_settings.setter
    def general_settings(self, general_settings):
        """
        Sets the general_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :param general_settings: The general_settings of this CrawlerConfiguration.
        :type: object
        """

        self._general_settings = general_settings

    @property
    def plugin_settings(self):
        """
        Gets the plugin_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :return: The plugin_settings of this CrawlerConfiguration.
        :rtype: object
        """
        return self._plugin_settings

    @plugin_settings.setter
    def plugin_settings(self, plugin_settings):
        """
        Sets the plugin_settings of this CrawlerConfiguration.
        Defined in each crawler template. See GET /api/v1/crawler/types/{crawlerTypeName}

        :param plugin_settings: The plugin_settings of this CrawlerConfiguration.
        :type: object
        """

        self._plugin_settings = plugin_settings

    @property
    def schedules(self):
        """
        Gets the schedules of this CrawlerConfiguration.

        :return: The schedules of this CrawlerConfiguration.
        :rtype: list[Schedule]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """
        Sets the schedules of this CrawlerConfiguration.

        :param schedules: The schedules of this CrawlerConfiguration.
        :type: list[Schedule]
        """

        self._schedules = schedules

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CrawlerConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
