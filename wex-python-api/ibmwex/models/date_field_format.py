# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DateFieldFormat(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_formats': 'list[str]',
        'locale_string': 'str',
        'time_zone_id': 'str'
    }

    attribute_map = {
        'date_formats': 'dateFormats',
        'locale_string': 'localeString',
        'time_zone_id': 'timeZoneId'
    }

    def __init__(self, date_formats=None, locale_string=None, time_zone_id=None):
        """
        DateFieldFormat - a model defined in Swagger
        """

        self._date_formats = None
        self._locale_string = None
        self._time_zone_id = None

        if date_formats is not None:
          self.date_formats = date_formats
        if locale_string is not None:
          self.locale_string = locale_string
        if time_zone_id is not None:
          self.time_zone_id = time_zone_id

    @property
    def date_formats(self):
        """
        Gets the date_formats of this DateFieldFormat.

        :return: The date_formats of this DateFieldFormat.
        :rtype: list[str]
        """
        return self._date_formats

    @date_formats.setter
    def date_formats(self, date_formats):
        """
        Sets the date_formats of this DateFieldFormat.

        :param date_formats: The date_formats of this DateFieldFormat.
        :type: list[str]
        """

        self._date_formats = date_formats

    @property
    def locale_string(self):
        """
        Gets the locale_string of this DateFieldFormat.

        :return: The locale_string of this DateFieldFormat.
        :rtype: str
        """
        return self._locale_string

    @locale_string.setter
    def locale_string(self, locale_string):
        """
        Sets the locale_string of this DateFieldFormat.

        :param locale_string: The locale_string of this DateFieldFormat.
        :type: str
        """

        self._locale_string = locale_string

    @property
    def time_zone_id(self):
        """
        Gets the time_zone_id of this DateFieldFormat.

        :return: The time_zone_id of this DateFieldFormat.
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """
        Sets the time_zone_id of this DateFieldFormat.

        :param time_zone_id: The time_zone_id of this DateFieldFormat.
        :type: str
        """

        self._time_zone_id = time_zone_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DateFieldFormat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
