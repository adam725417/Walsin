# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConfigurationParameter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boolean_initial_value': 'bool',
        'boolean_value': 'bool',
        'cardinality': 'str',
        'condition': 'ConfigurationParameterCondition',
        'description': 'str',
        'enum_values': 'list[ConfigurationParameterEnum]',
        'hidden': 'bool',
        'initial_value': 'object',
        'label': 'str',
        'list_initial_value': 'list[str]',
        'list_value': 'list[str]',
        'long_initial_value': 'int',
        'long_value': 'int',
        'name': 'str',
        'parameters': 'list[ConfigurationParameter]',
        'required': 'bool',
        'string_initial_value': 'str',
        'string_value': 'str',
        'type': 'str',
        'value': 'object'
    }

    attribute_map = {
        'boolean_initial_value': 'booleanInitialValue',
        'boolean_value': 'booleanValue',
        'cardinality': 'cardinality',
        'condition': 'condition',
        'description': 'description',
        'enum_values': 'enumValues',
        'hidden': 'hidden',
        'initial_value': 'initialValue',
        'label': 'label',
        'list_initial_value': 'listInitialValue',
        'list_value': 'listValue',
        'long_initial_value': 'longInitialValue',
        'long_value': 'longValue',
        'name': 'name',
        'parameters': 'parameters',
        'required': 'required',
        'string_initial_value': 'stringInitialValue',
        'string_value': 'stringValue',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, boolean_initial_value=None, boolean_value=None, cardinality=None, condition=None, description=None, enum_values=None, hidden=None, initial_value=None, label=None, list_initial_value=None, list_value=None, long_initial_value=None, long_value=None, name=None, parameters=None, required=None, string_initial_value=None, string_value=None, type=None, value=None):
        """
        ConfigurationParameter - a model defined in Swagger
        """

        self._boolean_initial_value = None
        self._boolean_value = None
        self._cardinality = None
        self._condition = None
        self._description = None
        self._enum_values = None
        self._hidden = None
        self._initial_value = None
        self._label = None
        self._list_initial_value = None
        self._list_value = None
        self._long_initial_value = None
        self._long_value = None
        self._name = None
        self._parameters = None
        self._required = None
        self._string_initial_value = None
        self._string_value = None
        self._type = None
        self._value = None

        if boolean_initial_value is not None:
          self.boolean_initial_value = boolean_initial_value
        if boolean_value is not None:
          self.boolean_value = boolean_value
        if cardinality is not None:
          self.cardinality = cardinality
        if condition is not None:
          self.condition = condition
        if description is not None:
          self.description = description
        if enum_values is not None:
          self.enum_values = enum_values
        if hidden is not None:
          self.hidden = hidden
        if initial_value is not None:
          self.initial_value = initial_value
        if label is not None:
          self.label = label
        if list_initial_value is not None:
          self.list_initial_value = list_initial_value
        if list_value is not None:
          self.list_value = list_value
        if long_initial_value is not None:
          self.long_initial_value = long_initial_value
        if long_value is not None:
          self.long_value = long_value
        if name is not None:
          self.name = name
        if parameters is not None:
          self.parameters = parameters
        if required is not None:
          self.required = required
        if string_initial_value is not None:
          self.string_initial_value = string_initial_value
        if string_value is not None:
          self.string_value = string_value
        if type is not None:
          self.type = type
        if value is not None:
          self.value = value

    @property
    def boolean_initial_value(self):
        """
        Gets the boolean_initial_value of this ConfigurationParameter.

        :return: The boolean_initial_value of this ConfigurationParameter.
        :rtype: bool
        """
        return self._boolean_initial_value

    @boolean_initial_value.setter
    def boolean_initial_value(self, boolean_initial_value):
        """
        Sets the boolean_initial_value of this ConfigurationParameter.

        :param boolean_initial_value: The boolean_initial_value of this ConfigurationParameter.
        :type: bool
        """

        self._boolean_initial_value = boolean_initial_value

    @property
    def boolean_value(self):
        """
        Gets the boolean_value of this ConfigurationParameter.

        :return: The boolean_value of this ConfigurationParameter.
        :rtype: bool
        """
        return self._boolean_value

    @boolean_value.setter
    def boolean_value(self, boolean_value):
        """
        Sets the boolean_value of this ConfigurationParameter.

        :param boolean_value: The boolean_value of this ConfigurationParameter.
        :type: bool
        """

        self._boolean_value = boolean_value

    @property
    def cardinality(self):
        """
        Gets the cardinality of this ConfigurationParameter.

        :return: The cardinality of this ConfigurationParameter.
        :rtype: str
        """
        return self._cardinality

    @cardinality.setter
    def cardinality(self, cardinality):
        """
        Sets the cardinality of this ConfigurationParameter.

        :param cardinality: The cardinality of this ConfigurationParameter.
        :type: str
        """
        allowed_values = ["SINGLE", "MULTIPLE"]
        if cardinality not in allowed_values:
            raise ValueError(
                "Invalid value for `cardinality` ({0}), must be one of {1}"
                .format(cardinality, allowed_values)
            )

        self._cardinality = cardinality

    @property
    def condition(self):
        """
        Gets the condition of this ConfigurationParameter.

        :return: The condition of this ConfigurationParameter.
        :rtype: ConfigurationParameterCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """
        Sets the condition of this ConfigurationParameter.

        :param condition: The condition of this ConfigurationParameter.
        :type: ConfigurationParameterCondition
        """

        self._condition = condition

    @property
    def description(self):
        """
        Gets the description of this ConfigurationParameter.

        :return: The description of this ConfigurationParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ConfigurationParameter.

        :param description: The description of this ConfigurationParameter.
        :type: str
        """

        self._description = description

    @property
    def enum_values(self):
        """
        Gets the enum_values of this ConfigurationParameter.

        :return: The enum_values of this ConfigurationParameter.
        :rtype: list[ConfigurationParameterEnum]
        """
        return self._enum_values

    @enum_values.setter
    def enum_values(self, enum_values):
        """
        Sets the enum_values of this ConfigurationParameter.

        :param enum_values: The enum_values of this ConfigurationParameter.
        :type: list[ConfigurationParameterEnum]
        """

        self._enum_values = enum_values

    @property
    def hidden(self):
        """
        Gets the hidden of this ConfigurationParameter.

        :return: The hidden of this ConfigurationParameter.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this ConfigurationParameter.

        :param hidden: The hidden of this ConfigurationParameter.
        :type: bool
        """

        self._hidden = hidden

    @property
    def initial_value(self):
        """
        Gets the initial_value of this ConfigurationParameter.

        :return: The initial_value of this ConfigurationParameter.
        :rtype: object
        """
        return self._initial_value

    @initial_value.setter
    def initial_value(self, initial_value):
        """
        Sets the initial_value of this ConfigurationParameter.

        :param initial_value: The initial_value of this ConfigurationParameter.
        :type: object
        """

        self._initial_value = initial_value

    @property
    def label(self):
        """
        Gets the label of this ConfigurationParameter.

        :return: The label of this ConfigurationParameter.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this ConfigurationParameter.

        :param label: The label of this ConfigurationParameter.
        :type: str
        """

        self._label = label

    @property
    def list_initial_value(self):
        """
        Gets the list_initial_value of this ConfigurationParameter.

        :return: The list_initial_value of this ConfigurationParameter.
        :rtype: list[str]
        """
        return self._list_initial_value

    @list_initial_value.setter
    def list_initial_value(self, list_initial_value):
        """
        Sets the list_initial_value of this ConfigurationParameter.

        :param list_initial_value: The list_initial_value of this ConfigurationParameter.
        :type: list[str]
        """

        self._list_initial_value = list_initial_value

    @property
    def list_value(self):
        """
        Gets the list_value of this ConfigurationParameter.

        :return: The list_value of this ConfigurationParameter.
        :rtype: list[str]
        """
        return self._list_value

    @list_value.setter
    def list_value(self, list_value):
        """
        Sets the list_value of this ConfigurationParameter.

        :param list_value: The list_value of this ConfigurationParameter.
        :type: list[str]
        """

        self._list_value = list_value

    @property
    def long_initial_value(self):
        """
        Gets the long_initial_value of this ConfigurationParameter.

        :return: The long_initial_value of this ConfigurationParameter.
        :rtype: int
        """
        return self._long_initial_value

    @long_initial_value.setter
    def long_initial_value(self, long_initial_value):
        """
        Sets the long_initial_value of this ConfigurationParameter.

        :param long_initial_value: The long_initial_value of this ConfigurationParameter.
        :type: int
        """

        self._long_initial_value = long_initial_value

    @property
    def long_value(self):
        """
        Gets the long_value of this ConfigurationParameter.

        :return: The long_value of this ConfigurationParameter.
        :rtype: int
        """
        return self._long_value

    @long_value.setter
    def long_value(self, long_value):
        """
        Sets the long_value of this ConfigurationParameter.

        :param long_value: The long_value of this ConfigurationParameter.
        :type: int
        """

        self._long_value = long_value

    @property
    def name(self):
        """
        Gets the name of this ConfigurationParameter.

        :return: The name of this ConfigurationParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ConfigurationParameter.

        :param name: The name of this ConfigurationParameter.
        :type: str
        """

        self._name = name

    @property
    def parameters(self):
        """
        Gets the parameters of this ConfigurationParameter.

        :return: The parameters of this ConfigurationParameter.
        :rtype: list[ConfigurationParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this ConfigurationParameter.

        :param parameters: The parameters of this ConfigurationParameter.
        :type: list[ConfigurationParameter]
        """

        self._parameters = parameters

    @property
    def required(self):
        """
        Gets the required of this ConfigurationParameter.

        :return: The required of this ConfigurationParameter.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this ConfigurationParameter.

        :param required: The required of this ConfigurationParameter.
        :type: bool
        """

        self._required = required

    @property
    def string_initial_value(self):
        """
        Gets the string_initial_value of this ConfigurationParameter.

        :return: The string_initial_value of this ConfigurationParameter.
        :rtype: str
        """
        return self._string_initial_value

    @string_initial_value.setter
    def string_initial_value(self, string_initial_value):
        """
        Sets the string_initial_value of this ConfigurationParameter.

        :param string_initial_value: The string_initial_value of this ConfigurationParameter.
        :type: str
        """

        self._string_initial_value = string_initial_value

    @property
    def string_value(self):
        """
        Gets the string_value of this ConfigurationParameter.

        :return: The string_value of this ConfigurationParameter.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """
        Sets the string_value of this ConfigurationParameter.

        :param string_value: The string_value of this ConfigurationParameter.
        :type: str
        """

        self._string_value = string_value

    @property
    def type(self):
        """
        Gets the type of this ConfigurationParameter.

        :return: The type of this ConfigurationParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ConfigurationParameter.

        :param type: The type of this ConfigurationParameter.
        :type: str
        """
        allowed_values = ["STRING", "BOOLEAN", "INT", "LONG", "PASSWORD", "DATE", "TEXT", "FILE", "ENUM", "LIST", "ENUMLIST", "SUBSECTION"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """
        Gets the value of this ConfigurationParameter.

        :return: The value of this ConfigurationParameter.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this ConfigurationParameter.

        :param value: The value of this ConfigurationParameter.
        :type: object
        """

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConfigurationParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
