# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InitSDRanker(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'description': 'str',
        'correct_answer_field': 'str',
        'correct_answer_field_type': 'str',
        'doc_id_field': 'str',
        'name': 'str',
        'source_dataset_id': 'str'
    }

    attribute_map = {
        'type': '@type',
        'description': 'description',
        'correct_answer_field': 'correctAnswerField',
        'correct_answer_field_type': 'correctAnswerFieldType',
        'doc_id_field': 'docIdField',
        'name': 'name',
        'source_dataset_id': 'sourceDatasetId'
    }

    def __init__(self, type='SimilarDocumentRanker', description=None, correct_answer_field=None, correct_answer_field_type=None, doc_id_field=None, name=None, source_dataset_id=None):
        """
        InitSDRanker - a model defined in Swagger
        """

        self._type = None
        self._description = None
        self._correct_answer_field = None
        self._correct_answer_field_type = None
        self._doc_id_field = None
        self._name = None
        self._source_dataset_id = None

        self.type = type
        if description is not None:
          self.description = description
        self.correct_answer_field = correct_answer_field
        self.correct_answer_field_type = correct_answer_field_type
        if doc_id_field is not None:
          self.doc_id_field = doc_id_field
        if name is not None:
          self.name = name
        self.source_dataset_id = source_dataset_id

    @property
    def type(self):
        """
        Gets the type of this InitSDRanker.
        Required property to deserialize the JSON string correctly

        :return: The type of this InitSDRanker.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this InitSDRanker.
        Required property to deserialize the JSON string correctly

        :param type: The type of this InitSDRanker.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def description(self):
        """
        Gets the description of this InitSDRanker.
        Description of the ranker

        :return: The description of this InitSDRanker.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InitSDRanker.
        Description of the ranker

        :param description: The description of this InitSDRanker.
        :type: str
        """

        self._description = description

    @property
    def correct_answer_field(self):
        """
        Gets the correct_answer_field of this InitSDRanker.
        Name of the field that contains information to detect truly similar documents

        :return: The correct_answer_field of this InitSDRanker.
        :rtype: str
        """
        return self._correct_answer_field

    @correct_answer_field.setter
    def correct_answer_field(self, correct_answer_field):
        """
        Sets the correct_answer_field of this InitSDRanker.
        Name of the field that contains information to detect truly similar documents

        :param correct_answer_field: The correct_answer_field of this InitSDRanker.
        :type: str
        """
        if correct_answer_field is None:
            raise ValueError("Invalid value for `correct_answer_field`, must not be `None`")

        self._correct_answer_field = correct_answer_field

    @property
    def correct_answer_field_type(self):
        """
        Gets the correct_answer_field_type of this InitSDRanker.
        Type of the answer field

        :return: The correct_answer_field_type of this InitSDRanker.
        :rtype: str
        """
        return self._correct_answer_field_type

    @correct_answer_field_type.setter
    def correct_answer_field_type(self, correct_answer_field_type):
        """
        Sets the correct_answer_field_type of this InitSDRanker.
        Type of the answer field

        :param correct_answer_field_type: The correct_answer_field_type of this InitSDRanker.
        :type: str
        """
        if correct_answer_field_type is None:
            raise ValueError("Invalid value for `correct_answer_field_type`, must not be `None`")
        allowed_values = ["ID", "ATTRIBUTE"]
        if correct_answer_field_type not in allowed_values:
            raise ValueError(
                "Invalid value for `correct_answer_field_type` ({0}), must be one of {1}"
                .format(correct_answer_field_type, allowed_values)
            )

        self._correct_answer_field_type = correct_answer_field_type

    @property
    def doc_id_field(self):
        """
        Gets the doc_id_field of this InitSDRanker.
        User defined document ID field that is used when the value of correctAnswerFieldType is ID

        :return: The doc_id_field of this InitSDRanker.
        :rtype: str
        """
        return self._doc_id_field

    @doc_id_field.setter
    def doc_id_field(self, doc_id_field):
        """
        Sets the doc_id_field of this InitSDRanker.
        User defined document ID field that is used when the value of correctAnswerFieldType is ID

        :param doc_id_field: The doc_id_field of this InitSDRanker.
        :type: str
        """

        self._doc_id_field = doc_id_field

    @property
    def name(self):
        """
        Gets the name of this InitSDRanker.
        Name

        :return: The name of this InitSDRanker.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InitSDRanker.
        Name

        :param name: The name of this InitSDRanker.
        :type: str
        """

        self._name = name

    @property
    def source_dataset_id(self):
        """
        Gets the source_dataset_id of this InitSDRanker.
        ID of the training dataset

        :return: The source_dataset_id of this InitSDRanker.
        :rtype: str
        """
        return self._source_dataset_id

    @source_dataset_id.setter
    def source_dataset_id(self, source_dataset_id):
        """
        Sets the source_dataset_id of this InitSDRanker.
        ID of the training dataset

        :param source_dataset_id: The source_dataset_id of this InitSDRanker.
        :type: str
        """
        if source_dataset_id is None:
            raise ValueError("Invalid value for `source_dataset_id`, must not be `None`")

        self._source_dataset_id = source_dataset_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InitSDRanker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
