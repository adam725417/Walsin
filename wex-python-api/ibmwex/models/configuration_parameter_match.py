# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConfigurationParameterMatch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_in': 'list[str]',
        'name': 'str',
        'value': 'str'
    }

    attribute_map = {
        '_in': 'in',
        'name': 'name',
        'value': 'value'
    }

    def __init__(self, _in=None, name=None, value=None):
        """
        ConfigurationParameterMatch - a model defined in Swagger
        """

        self.__in = None
        self._name = None
        self._value = None

        if _in is not None:
          self._in = _in
        if name is not None:
          self.name = name
        if value is not None:
          self.value = value

    @property
    def _in(self):
        """
        Gets the _in of this ConfigurationParameterMatch.

        :return: The _in of this ConfigurationParameterMatch.
        :rtype: list[str]
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """
        Sets the _in of this ConfigurationParameterMatch.

        :param _in: The _in of this ConfigurationParameterMatch.
        :type: list[str]
        """

        self.__in = _in

    @property
    def name(self):
        """
        Gets the name of this ConfigurationParameterMatch.

        :return: The name of this ConfigurationParameterMatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ConfigurationParameterMatch.

        :param name: The name of this ConfigurationParameterMatch.
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """
        Gets the value of this ConfigurationParameterMatch.

        :return: The value of this ConfigurationParameterMatch.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this ConfigurationParameterMatch.

        :param value: The value of this ConfigurationParameterMatch.
        :type: str
        """

        self._value = value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConfigurationParameterMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
