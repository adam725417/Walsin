# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RegExRule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'rule_id': 'str',
        'description': 'str',
        'pattern': 'str',
        'facet_path': 'str',
        'facet_value': 'str',
        'match_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'rule_id': 'ruleId',
        'description': 'description',
        'pattern': 'pattern',
        'facet_path': 'facetPath',
        'facet_value': 'facetValue',
        'match_type': 'matchType'
    }

    def __init__(self, name=None, rule_id=None, description=None, pattern=None, facet_path=None, facet_value=None, match_type=None):
        """
        RegExRule - a model defined in Swagger
        """

        self._name = None
        self._rule_id = None
        self._description = None
        self._pattern = None
        self._facet_path = None
        self._facet_value = None
        self._match_type = None

        if name is not None:
          self.name = name
        if rule_id is not None:
          self.rule_id = rule_id
        if description is not None:
          self.description = description
        if pattern is not None:
          self.pattern = pattern
        if facet_path is not None:
          self.facet_path = facet_path
        if facet_value is not None:
          self.facet_value = facet_value
        if match_type is not None:
          self.match_type = match_type

    @property
    def name(self):
        """
        Gets the name of this RegExRule.

        :return: The name of this RegExRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RegExRule.

        :param name: The name of this RegExRule.
        :type: str
        """

        self._name = name

    @property
    def rule_id(self):
        """
        Gets the rule_id of this RegExRule.

        :return: The rule_id of this RegExRule.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """
        Sets the rule_id of this RegExRule.

        :param rule_id: The rule_id of this RegExRule.
        :type: str
        """

        self._rule_id = rule_id

    @property
    def description(self):
        """
        Gets the description of this RegExRule.

        :return: The description of this RegExRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RegExRule.

        :param description: The description of this RegExRule.
        :type: str
        """

        self._description = description

    @property
    def pattern(self):
        """
        Gets the pattern of this RegExRule.

        :return: The pattern of this RegExRule.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """
        Sets the pattern of this RegExRule.

        :param pattern: The pattern of this RegExRule.
        :type: str
        """

        self._pattern = pattern

    @property
    def facet_path(self):
        """
        Gets the facet_path of this RegExRule.

        :return: The facet_path of this RegExRule.
        :rtype: str
        """
        return self._facet_path

    @facet_path.setter
    def facet_path(self, facet_path):
        """
        Sets the facet_path of this RegExRule.

        :param facet_path: The facet_path of this RegExRule.
        :type: str
        """

        self._facet_path = facet_path

    @property
    def facet_value(self):
        """
        Gets the facet_value of this RegExRule.

        :return: The facet_value of this RegExRule.
        :rtype: str
        """
        return self._facet_value

    @facet_value.setter
    def facet_value(self, facet_value):
        """
        Sets the facet_value of this RegExRule.

        :param facet_value: The facet_value of this RegExRule.
        :type: str
        """

        self._facet_value = facet_value

    @property
    def match_type(self):
        """
        Gets the match_type of this RegExRule.

        :return: The match_type of this RegExRule.
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """
        Sets the match_type of this RegExRule.

        :param match_type: The match_type of this RegExRule.
        :type: str
        """

        self._match_type = match_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RegExRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
