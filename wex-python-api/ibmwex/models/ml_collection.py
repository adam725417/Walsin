# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MLCollection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'enrich_field_groups': 'list[EnrichFieldGroup]',
        'enrichments': 'list[str]',
        'name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'enrich_field_groups': 'enrichFieldGroups',
        'enrichments': 'enrichments',
        'name': 'name'
    }

    def __init__(self, description=None, enrich_field_groups=None, enrichments=None, name=None):
        """
        MLCollection - a model defined in Swagger
        """

        self._description = None
        self._enrich_field_groups = None
        self._enrichments = None
        self._name = None

        if description is not None:
          self.description = description
        self.enrich_field_groups = enrich_field_groups
        self.enrichments = enrichments
        if name is not None:
          self.name = name

    @property
    def description(self):
        """
        Gets the description of this MLCollection.

        :return: The description of this MLCollection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MLCollection.

        :param description: The description of this MLCollection.
        :type: str
        """

        self._description = description

    @property
    def enrich_field_groups(self):
        """
        Gets the enrich_field_groups of this MLCollection.

        :return: The enrich_field_groups of this MLCollection.
        :rtype: list[EnrichFieldGroup]
        """
        return self._enrich_field_groups

    @enrich_field_groups.setter
    def enrich_field_groups(self, enrich_field_groups):
        """
        Sets the enrich_field_groups of this MLCollection.

        :param enrich_field_groups: The enrich_field_groups of this MLCollection.
        :type: list[EnrichFieldGroup]
        """
        if enrich_field_groups is None:
            raise ValueError("Invalid value for `enrich_field_groups`, must not be `None`")

        self._enrich_field_groups = enrich_field_groups

    @property
    def enrichments(self):
        """
        Gets the enrichments of this MLCollection.

        :return: The enrichments of this MLCollection.
        :rtype: list[str]
        """
        return self._enrichments

    @enrichments.setter
    def enrichments(self, enrichments):
        """
        Sets the enrichments of this MLCollection.

        :param enrichments: The enrichments of this MLCollection.
        :type: list[str]
        """
        if enrichments is None:
            raise ValueError("Invalid value for `enrichments`, must not be `None`")

        self._enrichments = enrichments

    @property
    def name(self):
        """
        Gets the name of this MLCollection.

        :return: The name of this MLCollection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MLCollection.

        :param name: The name of this MLCollection.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MLCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
