# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DatasetConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'dict(str, str)',
        'description': 'str',
        'id': 'str',
        'kept_ml_datasets': 'list[str]',
        'metadata': 'object',
        'name': 'str',
        'tags': 'dict(str, object)',
        'test_ratio': 'int',
        'training_ratio': 'int',
        'validation_ratio': 'int'
    }

    attribute_map = {
        'config': 'config',
        'description': 'description',
        'id': 'id',
        'kept_ml_datasets': 'keptMLDatasets',
        'metadata': 'metadata',
        'name': 'name',
        'tags': 'tags',
        'test_ratio': 'testRatio',
        'training_ratio': 'trainingRatio',
        'validation_ratio': 'validationRatio'
    }

    def __init__(self, config=None, description=None, id=None, kept_ml_datasets=None, metadata=None, name=None, tags=None, test_ratio=None, training_ratio=None, validation_ratio=None):
        """
        DatasetConfig - a model defined in Swagger
        """

        self._config = None
        self._description = None
        self._id = None
        self._kept_ml_datasets = None
        self._metadata = None
        self._name = None
        self._tags = None
        self._test_ratio = None
        self._training_ratio = None
        self._validation_ratio = None

        if config is not None:
          self.config = config
        if description is not None:
          self.description = description
        if id is not None:
          self.id = id
        if kept_ml_datasets is not None:
          self.kept_ml_datasets = kept_ml_datasets
        if metadata is not None:
          self.metadata = metadata
        if name is not None:
          self.name = name
        if tags is not None:
          self.tags = tags
        if test_ratio is not None:
          self.test_ratio = test_ratio
        if training_ratio is not None:
          self.training_ratio = training_ratio
        if validation_ratio is not None:
          self.validation_ratio = validation_ratio

    @property
    def config(self):
        """
        Gets the config of this DatasetConfig.
        Map of properties that can be passed to training process as arguments. Should start with *flag.*

        :return: The config of this DatasetConfig.
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this DatasetConfig.
        Map of properties that can be passed to training process as arguments. Should start with *flag.*

        :param config: The config of this DatasetConfig.
        :type: dict(str, str)
        """

        self._config = config

    @property
    def description(self):
        """
        Gets the description of this DatasetConfig.
        User-provided description

        :return: The description of this DatasetConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DatasetConfig.
        User-provided description

        :param description: The description of this DatasetConfig.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this DatasetConfig.
        ID

        :return: The id of this DatasetConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DatasetConfig.
        ID

        :param id: The id of this DatasetConfig.
        :type: str
        """

        self._id = id

    @property
    def kept_ml_datasets(self):
        """
        Gets the kept_ml_datasets of this DatasetConfig.
        Type of datasets specified to be kept by users

        :return: The kept_ml_datasets of this DatasetConfig.
        :rtype: list[str]
        """
        return self._kept_ml_datasets

    @kept_ml_datasets.setter
    def kept_ml_datasets(self, kept_ml_datasets):
        """
        Sets the kept_ml_datasets of this DatasetConfig.
        Type of datasets specified to be kept by users

        :param kept_ml_datasets: The kept_ml_datasets of this DatasetConfig.
        :type: list[str]
        """
        allowed_values = ["TRAINING", "TEST", "VALIDATION"]
        if not set(kept_ml_datasets).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `kept_ml_datasets` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(kept_ml_datasets)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._kept_ml_datasets = kept_ml_datasets

    @property
    def metadata(self):
        """
        Gets the metadata of this DatasetConfig.
        (Used by system)

        :return: The metadata of this DatasetConfig.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this DatasetConfig.
        (Used by system)

        :param metadata: The metadata of this DatasetConfig.
        :type: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """
        Gets the name of this DatasetConfig.
        Name

        :return: The name of this DatasetConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DatasetConfig.
        Name

        :param name: The name of this DatasetConfig.
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """
        Gets the tags of this DatasetConfig.
        (Used by system)

        :return: The tags of this DatasetConfig.
        :rtype: dict(str, object)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DatasetConfig.
        (Used by system)

        :param tags: The tags of this DatasetConfig.
        :type: dict(str, object)
        """

        self._tags = tags

    @property
    def test_ratio(self):
        """
        Gets the test_ratio of this DatasetConfig.
        Ratio of test set to divide the source dataset

        :return: The test_ratio of this DatasetConfig.
        :rtype: int
        """
        return self._test_ratio

    @test_ratio.setter
    def test_ratio(self, test_ratio):
        """
        Sets the test_ratio of this DatasetConfig.
        Ratio of test set to divide the source dataset

        :param test_ratio: The test_ratio of this DatasetConfig.
        :type: int
        """

        self._test_ratio = test_ratio

    @property
    def training_ratio(self):
        """
        Gets the training_ratio of this DatasetConfig.
        Ratio of training set to divide the source dataset

        :return: The training_ratio of this DatasetConfig.
        :rtype: int
        """
        return self._training_ratio

    @training_ratio.setter
    def training_ratio(self, training_ratio):
        """
        Sets the training_ratio of this DatasetConfig.
        Ratio of training set to divide the source dataset

        :param training_ratio: The training_ratio of this DatasetConfig.
        :type: int
        """

        self._training_ratio = training_ratio

    @property
    def validation_ratio(self):
        """
        Gets the validation_ratio of this DatasetConfig.
        Ratio of validation set to divide the source dataset

        :return: The validation_ratio of this DatasetConfig.
        :rtype: int
        """
        return self._validation_ratio

    @validation_ratio.setter
    def validation_ratio(self, validation_ratio):
        """
        Sets the validation_ratio of this DatasetConfig.
        Ratio of validation set to divide the source dataset

        :param validation_ratio: The validation_ratio of this DatasetConfig.
        :type: int
        """

        self._validation_ratio = validation_ratio

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DatasetConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
