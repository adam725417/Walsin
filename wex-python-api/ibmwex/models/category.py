# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Category(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[Category]',
        'count_subcategories': 'bool',
        'counter_field_name': 'str',
        'editable': 'bool',
        'lift_up': 'bool',
        'name': 'str',
        'path': 'str',
        'store_position': 'bool',
        'store_subcategories_position': 'bool',
        'type': 'str',
        'visible': 'bool',
        'tags': 'dict(str, object)'
    }

    attribute_map = {
        'children': 'children',
        'count_subcategories': 'countSubcategories',
        'counter_field_name': 'counterFieldName',
        'editable': 'editable',
        'lift_up': 'liftUp',
        'name': 'name',
        'path': 'path',
        'store_position': 'storePosition',
        'store_subcategories_position': 'storeSubcategoriesPosition',
        'type': 'type',
        'visible': 'visible',
        'tags': 'tags'
    }

    def __init__(self, children=None, count_subcategories=None, counter_field_name=None, editable=None, lift_up=None, name=None, path=None, store_position=None, store_subcategories_position=None, type=None, visible=None, tags=None):
        """
        Category - a model defined in Swagger
        """

        self._children = None
        self._count_subcategories = None
        self._counter_field_name = None
        self._editable = None
        self._lift_up = None
        self._name = None
        self._path = None
        self._store_position = None
        self._store_subcategories_position = None
        self._type = None
        self._visible = None
        self._tags = None

        if children is not None:
          self.children = children
        if count_subcategories is not None:
          self.count_subcategories = count_subcategories
        if counter_field_name is not None:
          self.counter_field_name = counter_field_name
        if editable is not None:
          self.editable = editable
        if lift_up is not None:
          self.lift_up = lift_up
        if name is not None:
          self.name = name
        if path is not None:
          self.path = path
        if store_position is not None:
          self.store_position = store_position
        if store_subcategories_position is not None:
          self.store_subcategories_position = store_subcategories_position
        if type is not None:
          self.type = type
        if visible is not None:
          self.visible = visible
        if tags is not None:
          self.tags = tags

    @property
    def children(self):
        """
        Gets the children of this Category.

        :return: The children of this Category.
        :rtype: list[Category]
        """
        return self._children

    @children.setter
    def children(self, children):
        """
        Sets the children of this Category.

        :param children: The children of this Category.
        :type: list[Category]
        """

        self._children = children

    @property
    def count_subcategories(self):
        """
        Gets the count_subcategories of this Category.

        :return: The count_subcategories of this Category.
        :rtype: bool
        """
        return self._count_subcategories

    @count_subcategories.setter
    def count_subcategories(self, count_subcategories):
        """
        Sets the count_subcategories of this Category.

        :param count_subcategories: The count_subcategories of this Category.
        :type: bool
        """

        self._count_subcategories = count_subcategories

    @property
    def counter_field_name(self):
        """
        Gets the counter_field_name of this Category.

        :return: The counter_field_name of this Category.
        :rtype: str
        """
        return self._counter_field_name

    @counter_field_name.setter
    def counter_field_name(self, counter_field_name):
        """
        Sets the counter_field_name of this Category.

        :param counter_field_name: The counter_field_name of this Category.
        :type: str
        """

        self._counter_field_name = counter_field_name

    @property
    def editable(self):
        """
        Gets the editable of this Category.

        :return: The editable of this Category.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """
        Sets the editable of this Category.

        :param editable: The editable of this Category.
        :type: bool
        """

        self._editable = editable

    @property
    def lift_up(self):
        """
        Gets the lift_up of this Category.

        :return: The lift_up of this Category.
        :rtype: bool
        """
        return self._lift_up

    @lift_up.setter
    def lift_up(self, lift_up):
        """
        Sets the lift_up of this Category.

        :param lift_up: The lift_up of this Category.
        :type: bool
        """

        self._lift_up = lift_up

    @property
    def name(self):
        """
        Gets the name of this Category.

        :return: The name of this Category.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Category.

        :param name: The name of this Category.
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """
        Gets the path of this Category.

        :return: The path of this Category.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this Category.

        :param path: The path of this Category.
        :type: str
        """

        self._path = path

    @property
    def store_position(self):
        """
        Gets the store_position of this Category.

        :return: The store_position of this Category.
        :rtype: bool
        """
        return self._store_position

    @store_position.setter
    def store_position(self, store_position):
        """
        Sets the store_position of this Category.

        :param store_position: The store_position of this Category.
        :type: bool
        """

        self._store_position = store_position

    @property
    def store_subcategories_position(self):
        """
        Gets the store_subcategories_position of this Category.

        :return: The store_subcategories_position of this Category.
        :rtype: bool
        """
        return self._store_subcategories_position

    @store_subcategories_position.setter
    def store_subcategories_position(self, store_subcategories_position):
        """
        Sets the store_subcategories_position of this Category.

        :param store_subcategories_position: The store_subcategories_position of this Category.
        :type: bool
        """

        self._store_subcategories_position = store_subcategories_position

    @property
    def type(self):
        """
        Gets the type of this Category.

        :return: The type of this Category.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Category.

        :param type: The type of this Category.
        :type: str
        """

        self._type = type

    @property
    def visible(self):
        """
        Gets the visible of this Category.

        :return: The visible of this Category.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """
        Sets the visible of this Category.

        :param visible: The visible of this Category.
        :type: bool
        """

        self._visible = visible

    @property
    def tags(self):
        """
        Gets the tags of this Category.

        :return: The tags of this Category.
        :rtype: dict(str, object)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Category.

        :param tags: The tags of this Category.
        :type: dict(str, object)
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
