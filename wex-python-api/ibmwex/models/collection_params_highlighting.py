# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CollectionParamsHighlighting(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hl': 'bool',
        'hl_method': 'str',
        'hl_required_field_match': 'bool',
        'hl_snippets': 'int',
        'hl_encoder': 'str'
    }

    attribute_map = {
        'hl': 'hl',
        'hl_method': 'hl.method',
        'hl_required_field_match': 'hl.requiredFieldMatch',
        'hl_snippets': 'hl.snippets',
        'hl_encoder': 'hl.encoder'
    }

    def __init__(self, hl=None, hl_method=None, hl_required_field_match=None, hl_snippets=None, hl_encoder=None):
        """
        CollectionParamsHighlighting - a model defined in Swagger
        """

        self._hl = None
        self._hl_method = None
        self._hl_required_field_match = None
        self._hl_snippets = None
        self._hl_encoder = None

        if hl is not None:
          self.hl = hl
        if hl_method is not None:
          self.hl_method = hl_method
        if hl_required_field_match is not None:
          self.hl_required_field_match = hl_required_field_match
        if hl_snippets is not None:
          self.hl_snippets = hl_snippets
        if hl_encoder is not None:
          self.hl_encoder = hl_encoder

    @property
    def hl(self):
        """
        Gets the hl of this CollectionParamsHighlighting.

        :return: The hl of this CollectionParamsHighlighting.
        :rtype: bool
        """
        return self._hl

    @hl.setter
    def hl(self, hl):
        """
        Sets the hl of this CollectionParamsHighlighting.

        :param hl: The hl of this CollectionParamsHighlighting.
        :type: bool
        """

        self._hl = hl

    @property
    def hl_method(self):
        """
        Gets the hl_method of this CollectionParamsHighlighting.

        :return: The hl_method of this CollectionParamsHighlighting.
        :rtype: str
        """
        return self._hl_method

    @hl_method.setter
    def hl_method(self, hl_method):
        """
        Sets the hl_method of this CollectionParamsHighlighting.

        :param hl_method: The hl_method of this CollectionParamsHighlighting.
        :type: str
        """

        self._hl_method = hl_method

    @property
    def hl_required_field_match(self):
        """
        Gets the hl_required_field_match of this CollectionParamsHighlighting.

        :return: The hl_required_field_match of this CollectionParamsHighlighting.
        :rtype: bool
        """
        return self._hl_required_field_match

    @hl_required_field_match.setter
    def hl_required_field_match(self, hl_required_field_match):
        """
        Sets the hl_required_field_match of this CollectionParamsHighlighting.

        :param hl_required_field_match: The hl_required_field_match of this CollectionParamsHighlighting.
        :type: bool
        """

        self._hl_required_field_match = hl_required_field_match

    @property
    def hl_snippets(self):
        """
        Gets the hl_snippets of this CollectionParamsHighlighting.

        :return: The hl_snippets of this CollectionParamsHighlighting.
        :rtype: int
        """
        return self._hl_snippets

    @hl_snippets.setter
    def hl_snippets(self, hl_snippets):
        """
        Sets the hl_snippets of this CollectionParamsHighlighting.

        :param hl_snippets: The hl_snippets of this CollectionParamsHighlighting.
        :type: int
        """

        self._hl_snippets = hl_snippets

    @property
    def hl_encoder(self):
        """
        Gets the hl_encoder of this CollectionParamsHighlighting.

        :return: The hl_encoder of this CollectionParamsHighlighting.
        :rtype: str
        """
        return self._hl_encoder

    @hl_encoder.setter
    def hl_encoder(self, hl_encoder):
        """
        Sets the hl_encoder of this CollectionParamsHighlighting.

        :param hl_encoder: The hl_encoder of this CollectionParamsHighlighting.
        :type: str
        """

        self._hl_encoder = hl_encoder

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CollectionParamsHighlighting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
