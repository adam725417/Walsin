# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Ranker(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_resources': 'list[str]',
        'id': 'str',
        'metadata': 'object',
        'model_id': 'str',
        'name': 'str',
        'ranker_id': 'str',
        'tags': 'dict(str, object)'
    }

    attribute_map = {
        'file_resources': 'fileResources',
        'id': 'id',
        'metadata': 'metadata',
        'model_id': 'modelId',
        'name': 'name',
        'ranker_id': 'rankerId',
        'tags': 'tags'
    }

    def __init__(self, file_resources=None, id=None, metadata=None, model_id=None, name=None, ranker_id=None, tags=None):
        """
        Ranker - a model defined in Swagger
        """

        self._file_resources = None
        self._id = None
        self._metadata = None
        self._model_id = None
        self._name = None
        self._ranker_id = None
        self._tags = None

        if file_resources is not None:
          self.file_resources = file_resources
        if id is not None:
          self.id = id
        if metadata is not None:
          self.metadata = metadata
        if model_id is not None:
          self.model_id = model_id
        if name is not None:
          self.name = name
        if ranker_id is not None:
          self.ranker_id = ranker_id
        if tags is not None:
          self.tags = tags

    @property
    def file_resources(self):
        """
        Gets the file_resources of this Ranker.
        File resources used by this ranker intance

        :return: The file_resources of this Ranker.
        :rtype: list[str]
        """
        return self._file_resources

    @file_resources.setter
    def file_resources(self, file_resources):
        """
        Sets the file_resources of this Ranker.
        File resources used by this ranker intance

        :param file_resources: The file_resources of this Ranker.
        :type: list[str]
        """

        self._file_resources = file_resources

    @property
    def id(self):
        """
        Gets the id of this Ranker.
        ID

        :return: The id of this Ranker.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Ranker.
        ID

        :param id: The id of this Ranker.
        :type: str
        """

        self._id = id

    @property
    def metadata(self):
        """
        Gets the metadata of this Ranker.
        (Used by system)

        :return: The metadata of this Ranker.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this Ranker.
        (Used by system)

        :param metadata: The metadata of this Ranker.
        :type: object
        """

        self._metadata = metadata

    @property
    def model_id(self):
        """
        Gets the model_id of this Ranker.
        Id of the ranker model

        :return: The model_id of this Ranker.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """
        Sets the model_id of this Ranker.
        Id of the ranker model

        :param model_id: The model_id of this Ranker.
        :type: str
        """

        self._model_id = model_id

    @property
    def name(self):
        """
        Gets the name of this Ranker.
        Name

        :return: The name of this Ranker.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Ranker.
        Name

        :param name: The name of this Ranker.
        :type: str
        """

        self._name = name

    @property
    def ranker_id(self):
        """
        Gets the ranker_id of this Ranker.
        ID of the originated ranker

        :return: The ranker_id of this Ranker.
        :rtype: str
        """
        return self._ranker_id

    @ranker_id.setter
    def ranker_id(self, ranker_id):
        """
        Sets the ranker_id of this Ranker.
        ID of the originated ranker

        :param ranker_id: The ranker_id of this Ranker.
        :type: str
        """

        self._ranker_id = ranker_id

    @property
    def tags(self):
        """
        Gets the tags of this Ranker.
        (Used by system)

        :return: The tags of this Ranker.
        :rtype: dict(str, object)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Ranker.
        (Used by system)

        :param tags: The tags of this Ranker.
        :type: dict(str, object)
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Ranker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
