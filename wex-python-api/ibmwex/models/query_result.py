# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QueryResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_header': 'QueryResultResponseHeader',
        'response': 'QueryResultResponse',
        'facet_counts': 'QueryResultFacetCounts',
        'facet_stats': 'QueryResultFacetStats',
        'highlighting': 'object'
    }

    attribute_map = {
        'response_header': 'responseHeader',
        'response': 'response',
        'facet_counts': 'facet_counts',
        'facet_stats': 'facet_stats',
        'highlighting': 'highlighting'
    }

    def __init__(self, response_header=None, response=None, facet_counts=None, facet_stats=None, highlighting=None):
        """
        QueryResult - a model defined in Swagger
        """

        self._response_header = None
        self._response = None
        self._facet_counts = None
        self._facet_stats = None
        self._highlighting = None

        if response_header is not None:
          self.response_header = response_header
        if response is not None:
          self.response = response
        if facet_counts is not None:
          self.facet_counts = facet_counts
        if facet_stats is not None:
          self.facet_stats = facet_stats
        if highlighting is not None:
          self.highlighting = highlighting

    @property
    def response_header(self):
        """
        Gets the response_header of this QueryResult.

        :return: The response_header of this QueryResult.
        :rtype: QueryResultResponseHeader
        """
        return self._response_header

    @response_header.setter
    def response_header(self, response_header):
        """
        Sets the response_header of this QueryResult.

        :param response_header: The response_header of this QueryResult.
        :type: QueryResultResponseHeader
        """

        self._response_header = response_header

    @property
    def response(self):
        """
        Gets the response of this QueryResult.

        :return: The response of this QueryResult.
        :rtype: QueryResultResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """
        Sets the response of this QueryResult.

        :param response: The response of this QueryResult.
        :type: QueryResultResponse
        """

        self._response = response

    @property
    def facet_counts(self):
        """
        Gets the facet_counts of this QueryResult.

        :return: The facet_counts of this QueryResult.
        :rtype: QueryResultFacetCounts
        """
        return self._facet_counts

    @facet_counts.setter
    def facet_counts(self, facet_counts):
        """
        Sets the facet_counts of this QueryResult.

        :param facet_counts: The facet_counts of this QueryResult.
        :type: QueryResultFacetCounts
        """

        self._facet_counts = facet_counts

    @property
    def facet_stats(self):
        """
        Gets the facet_stats of this QueryResult.

        :return: The facet_stats of this QueryResult.
        :rtype: QueryResultFacetStats
        """
        return self._facet_stats

    @facet_stats.setter
    def facet_stats(self, facet_stats):
        """
        Sets the facet_stats of this QueryResult.

        :param facet_stats: The facet_stats of this QueryResult.
        :type: QueryResultFacetStats
        """

        self._facet_stats = facet_stats

    @property
    def highlighting(self):
        """
        Gets the highlighting of this QueryResult.
        List of text snippets including query matches.

        :return: The highlighting of this QueryResult.
        :rtype: object
        """
        return self._highlighting

    @highlighting.setter
    def highlighting(self, highlighting):
        """
        Sets the highlighting of this QueryResult.
        List of text snippets including query matches.

        :param highlighting: The highlighting of this QueryResult.
        :type: object
        """

        self._highlighting = highlighting

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QueryResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
