# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConverterConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auxiliary_settings': 'JsonNode',
        'converter_settings': 'dict(str, object)',
        'general_settings': 'GeneralSettings',
        'name': 'str'
    }

    attribute_map = {
        'auxiliary_settings': 'auxiliarySettings',
        'converter_settings': 'converterSettings',
        'general_settings': 'generalSettings',
        'name': 'name'
    }

    def __init__(self, auxiliary_settings=None, converter_settings=None, general_settings=None, name=None):
        """
        ConverterConfiguration - a model defined in Swagger
        """

        self._auxiliary_settings = None
        self._converter_settings = None
        self._general_settings = None
        self._name = None

        if auxiliary_settings is not None:
          self.auxiliary_settings = auxiliary_settings
        if converter_settings is not None:
          self.converter_settings = converter_settings
        if general_settings is not None:
          self.general_settings = general_settings
        if name is not None:
          self.name = name

    @property
    def auxiliary_settings(self):
        """
        Gets the auxiliary_settings of this ConverterConfiguration.

        :return: The auxiliary_settings of this ConverterConfiguration.
        :rtype: JsonNode
        """
        return self._auxiliary_settings

    @auxiliary_settings.setter
    def auxiliary_settings(self, auxiliary_settings):
        """
        Sets the auxiliary_settings of this ConverterConfiguration.

        :param auxiliary_settings: The auxiliary_settings of this ConverterConfiguration.
        :type: JsonNode
        """

        self._auxiliary_settings = auxiliary_settings

    @property
    def converter_settings(self):
        """
        Gets the converter_settings of this ConverterConfiguration.

        :return: The converter_settings of this ConverterConfiguration.
        :rtype: dict(str, object)
        """
        return self._converter_settings

    @converter_settings.setter
    def converter_settings(self, converter_settings):
        """
        Sets the converter_settings of this ConverterConfiguration.

        :param converter_settings: The converter_settings of this ConverterConfiguration.
        :type: dict(str, object)
        """

        self._converter_settings = converter_settings

    @property
    def general_settings(self):
        """
        Gets the general_settings of this ConverterConfiguration.

        :return: The general_settings of this ConverterConfiguration.
        :rtype: GeneralSettings
        """
        return self._general_settings

    @general_settings.setter
    def general_settings(self, general_settings):
        """
        Sets the general_settings of this ConverterConfiguration.

        :param general_settings: The general_settings of this ConverterConfiguration.
        :type: GeneralSettings
        """

        self._general_settings = general_settings

    @property
    def name(self):
        """
        Gets the name of this ConverterConfiguration.

        :return: The name of this ConverterConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ConverterConfiguration.

        :param name: The name of this ConverterConfiguration.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConverterConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
