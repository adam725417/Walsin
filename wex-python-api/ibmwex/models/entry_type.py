# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EntryType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apply': 'bool',
        'facet': 'list[FacetType]',
        'ignore_case': 'bool',
        'mtime': 'int',
        'val': 'str',
        'word': 'list[WordType]'
    }

    attribute_map = {
        'apply': 'apply',
        'facet': 'facet',
        'ignore_case': 'ignoreCase',
        'mtime': 'mtime',
        'val': 'val',
        'word': 'word'
    }

    def __init__(self, apply=None, facet=None, ignore_case=None, mtime=None, val=None, word=None):
        """
        EntryType - a model defined in Swagger
        """

        self._apply = None
        self._facet = None
        self._ignore_case = None
        self._mtime = None
        self._val = None
        self._word = None

        if apply is not None:
          self.apply = apply
        if facet is not None:
          self.facet = facet
        if ignore_case is not None:
          self.ignore_case = ignore_case
        if mtime is not None:
          self.mtime = mtime
        if val is not None:
          self.val = val
        self.word = word

    @property
    def apply(self):
        """
        Gets the apply of this EntryType.

        :return: The apply of this EntryType.
        :rtype: bool
        """
        return self._apply

    @apply.setter
    def apply(self, apply):
        """
        Sets the apply of this EntryType.

        :param apply: The apply of this EntryType.
        :type: bool
        """

        self._apply = apply

    @property
    def facet(self):
        """
        Gets the facet of this EntryType.

        :return: The facet of this EntryType.
        :rtype: list[FacetType]
        """
        return self._facet

    @facet.setter
    def facet(self, facet):
        """
        Sets the facet of this EntryType.

        :param facet: The facet of this EntryType.
        :type: list[FacetType]
        """

        self._facet = facet

    @property
    def ignore_case(self):
        """
        Gets the ignore_case of this EntryType.

        :return: The ignore_case of this EntryType.
        :rtype: bool
        """
        return self._ignore_case

    @ignore_case.setter
    def ignore_case(self, ignore_case):
        """
        Sets the ignore_case of this EntryType.

        :param ignore_case: The ignore_case of this EntryType.
        :type: bool
        """

        self._ignore_case = ignore_case

    @property
    def mtime(self):
        """
        Gets the mtime of this EntryType.

        :return: The mtime of this EntryType.
        :rtype: int
        """
        return self._mtime

    @mtime.setter
    def mtime(self, mtime):
        """
        Sets the mtime of this EntryType.

        :param mtime: The mtime of this EntryType.
        :type: int
        """

        self._mtime = mtime

    @property
    def val(self):
        """
        Gets the val of this EntryType.

        :return: The val of this EntryType.
        :rtype: str
        """
        return self._val

    @val.setter
    def val(self, val):
        """
        Sets the val of this EntryType.

        :param val: The val of this EntryType.
        :type: str
        """

        self._val = val

    @property
    def word(self):
        """
        Gets the word of this EntryType.

        :return: The word of this EntryType.
        :rtype: list[WordType]
        """
        return self._word

    @word.setter
    def word(self, word):
        """
        Sets the word of this EntryType.

        :param word: The word of this EntryType.
        :type: list[WordType]
        """
        if word is None:
            raise ValueError("Invalid value for `word`, must not be `None`")

        self._word = word

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EntryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
