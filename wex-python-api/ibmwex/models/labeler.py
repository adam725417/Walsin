# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Labeler(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'configs': 'list[DatasetConfig]',
        'description': 'str',
        'ground_truth_label_facet': 'str',
        'id': 'str',
        'metadata': 'object',
        'ml_collection_id': 'str',
        'models': 'list[ClassifierModel]',
        'name': 'str',
        'predicted_label_facet': 'str',
        'resources': 'list[ResourceSet]',
        'source_dataset_id': 'str',
        'tags': 'dict(str, object)'
    }

    attribute_map = {
        'type': '@type',
        'configs': 'configs',
        'description': 'description',
        'ground_truth_label_facet': 'groundTruthLabelFacet',
        'id': 'id',
        'metadata': 'metadata',
        'ml_collection_id': 'mlCollectionId',
        'models': 'models',
        'name': 'name',
        'predicted_label_facet': 'predictedLabelFacet',
        'resources': 'resources',
        'source_dataset_id': 'sourceDatasetId',
        'tags': 'tags'
    }

    def __init__(self, type='Labeler', configs=None, description=None, ground_truth_label_facet=None, id=None, metadata=None, ml_collection_id=None, models=None, name=None, predicted_label_facet=None, resources=None, source_dataset_id=None, tags=None):
        """
        Labeler - a model defined in Swagger
        """

        self._type = None
        self._configs = None
        self._description = None
        self._ground_truth_label_facet = None
        self._id = None
        self._metadata = None
        self._ml_collection_id = None
        self._models = None
        self._name = None
        self._predicted_label_facet = None
        self._resources = None
        self._source_dataset_id = None
        self._tags = None

        self.type = type
        if configs is not None:
          self.configs = configs
        if description is not None:
          self.description = description
        self.ground_truth_label_facet = ground_truth_label_facet
        if id is not None:
          self.id = id
        if metadata is not None:
          self.metadata = metadata
        if ml_collection_id is not None:
          self.ml_collection_id = ml_collection_id
        if models is not None:
          self.models = models
        if name is not None:
          self.name = name
        self.predicted_label_facet = predicted_label_facet
        if resources is not None:
          self.resources = resources
        if source_dataset_id is not None:
          self.source_dataset_id = source_dataset_id
        if tags is not None:
          self.tags = tags

    @property
    def type(self):
        """
        Gets the type of this Labeler.
        Required property to deserialize the JSON string correctly

        :return: The type of this Labeler.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Labeler.
        Required property to deserialize the JSON string correctly

        :param type: The type of this Labeler.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def configs(self):
        """
        Gets the configs of this Labeler.
        Settings to split the source dataset into training, validation, and test sets

        :return: The configs of this Labeler.
        :rtype: list[DatasetConfig]
        """
        return self._configs

    @configs.setter
    def configs(self, configs):
        """
        Sets the configs of this Labeler.
        Settings to split the source dataset into training, validation, and test sets

        :param configs: The configs of this Labeler.
        :type: list[DatasetConfig]
        """

        self._configs = configs

    @property
    def description(self):
        """
        Gets the description of this Labeler.
        Description of the labeler

        :return: The description of this Labeler.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Labeler.
        Description of the labeler

        :param description: The description of this Labeler.
        :type: str
        """

        self._description = description

    @property
    def ground_truth_label_facet(self):
        """
        Gets the ground_truth_label_facet of this Labeler.
        Name of the answer field that contains correct labels of a document

        :return: The ground_truth_label_facet of this Labeler.
        :rtype: str
        """
        return self._ground_truth_label_facet

    @ground_truth_label_facet.setter
    def ground_truth_label_facet(self, ground_truth_label_facet):
        """
        Sets the ground_truth_label_facet of this Labeler.
        Name of the answer field that contains correct labels of a document

        :param ground_truth_label_facet: The ground_truth_label_facet of this Labeler.
        :type: str
        """
        if ground_truth_label_facet is None:
            raise ValueError("Invalid value for `ground_truth_label_facet`, must not be `None`")

        self._ground_truth_label_facet = ground_truth_label_facet

    @property
    def id(self):
        """
        Gets the id of this Labeler.
        ID

        :return: The id of this Labeler.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Labeler.
        ID

        :param id: The id of this Labeler.
        :type: str
        """

        self._id = id

    @property
    def metadata(self):
        """
        Gets the metadata of this Labeler.
        (Used by system)

        :return: The metadata of this Labeler.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this Labeler.
        (Used by system)

        :param metadata: The metadata of this Labeler.
        :type: object
        """

        self._metadata = metadata

    @property
    def ml_collection_id(self):
        """
        Gets the ml_collection_id of this Labeler.
        ID of the collection created by POST /api/v1/labelers/{labelerId}/collection

        :return: The ml_collection_id of this Labeler.
        :rtype: str
        """
        return self._ml_collection_id

    @ml_collection_id.setter
    def ml_collection_id(self, ml_collection_id):
        """
        Sets the ml_collection_id of this Labeler.
        ID of the collection created by POST /api/v1/labelers/{labelerId}/collection

        :param ml_collection_id: The ml_collection_id of this Labeler.
        :type: str
        """

        self._ml_collection_id = ml_collection_id

    @property
    def models(self):
        """
        Gets the models of this Labeler.
        Labeler models

        :return: The models of this Labeler.
        :rtype: list[ClassifierModel]
        """
        return self._models

    @models.setter
    def models(self, models):
        """
        Sets the models of this Labeler.
        Labeler models

        :param models: The models of this Labeler.
        :type: list[ClassifierModel]
        """

        self._models = models

    @property
    def name(self):
        """
        Gets the name of this Labeler.
        Name

        :return: The name of this Labeler.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Labeler.
        Name

        :param name: The name of this Labeler.
        :type: str
        """

        self._name = name

    @property
    def predicted_label_facet(self):
        """
        Gets the predicted_label_facet of this Labeler.
        Name of the field that contains predicted labels given by this labeler

        :return: The predicted_label_facet of this Labeler.
        :rtype: str
        """
        return self._predicted_label_facet

    @predicted_label_facet.setter
    def predicted_label_facet(self, predicted_label_facet):
        """
        Sets the predicted_label_facet of this Labeler.
        Name of the field that contains predicted labels given by this labeler

        :param predicted_label_facet: The predicted_label_facet of this Labeler.
        :type: str
        """
        if predicted_label_facet is None:
            raise ValueError("Invalid value for `predicted_label_facet`, must not be `None`")

        self._predicted_label_facet = predicted_label_facet

    @property
    def resources(self):
        """
        Gets the resources of this Labeler.
        Resource sets

        :return: The resources of this Labeler.
        :rtype: list[ResourceSet]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this Labeler.
        Resource sets

        :param resources: The resources of this Labeler.
        :type: list[ResourceSet]
        """

        self._resources = resources

    @property
    def source_dataset_id(self):
        """
        Gets the source_dataset_id of this Labeler.
        ID of the source dataset provided when creating this labeler

        :return: The source_dataset_id of this Labeler.
        :rtype: str
        """
        return self._source_dataset_id

    @source_dataset_id.setter
    def source_dataset_id(self, source_dataset_id):
        """
        Sets the source_dataset_id of this Labeler.
        ID of the source dataset provided when creating this labeler

        :param source_dataset_id: The source_dataset_id of this Labeler.
        :type: str
        """

        self._source_dataset_id = source_dataset_id

    @property
    def tags(self):
        """
        Gets the tags of this Labeler.
        (Used by system)

        :return: The tags of this Labeler.
        :rtype: dict(str, object)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Labeler.
        (Used by system)

        :param tags: The tags of this Labeler.
        :type: dict(str, object)
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Labeler):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
