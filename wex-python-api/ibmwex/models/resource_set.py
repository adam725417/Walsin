# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResourceSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_end_time': 'int',
        'creation_start_time': 'int',
        'description': 'str',
        'docid_list_resource_id': 'str',
        'feature_list_resource_id': 'str',
        'feature_sampling_rate': 'float',
        'feature_size': 'int',
        'feature_threshold': 'int',
        'id': 'str',
        'initialized_time': 'int',
        'label_list_resource_id': 'str',
        'labels': 'list[str]',
        'label_sampling_rate': 'float',
        'label_threshold': 'int',
        'metadata': 'object',
        'name': 'str',
        'state': 'str',
        'tags': 'dict(str, object)',
        'test_data_resource_id': 'str',
        'test_data_set_id': 'str',
        'test_data_size': 'int',
        'test_rich_data_set_id': 'str',
        'training_data_resource_id': 'str',
        'training_data_set_id': 'str',
        'training_data_size': 'int',
        'training_rich_data_set_id': 'str',
        'validation_data_resource_id': 'str',
        'validation_data_set_id': 'str',
        'validation_data_size': 'int',
        'validation_rich_data_set_id': 'str'
    }

    attribute_map = {
        'creation_end_time': 'creationEndTime',
        'creation_start_time': 'creationStartTime',
        'description': 'description',
        'docid_list_resource_id': 'docidListResourceId',
        'feature_list_resource_id': 'featureListResourceId',
        'feature_sampling_rate': 'featureSamplingRate',
        'feature_size': 'featureSize',
        'feature_threshold': 'featureThreshold',
        'id': 'id',
        'initialized_time': 'initializedTime',
        'label_list_resource_id': 'labelListResourceId',
        'labels': 'labels',
        'label_sampling_rate': 'labelSamplingRate',
        'label_threshold': 'labelThreshold',
        'metadata': 'metadata',
        'name': 'name',
        'state': 'state',
        'tags': 'tags',
        'test_data_resource_id': 'testDataResourceId',
        'test_data_set_id': 'testDataSetId',
        'test_data_size': 'testDataSize',
        'test_rich_data_set_id': 'testRichDataSetId',
        'training_data_resource_id': 'trainingDataResourceId',
        'training_data_set_id': 'trainingDataSetId',
        'training_data_size': 'trainingDataSize',
        'training_rich_data_set_id': 'trainingRichDataSetId',
        'validation_data_resource_id': 'validationDataResourceId',
        'validation_data_set_id': 'validationDataSetId',
        'validation_data_size': 'validationDataSize',
        'validation_rich_data_set_id': 'validationRichDataSetId'
    }

    def __init__(self, creation_end_time=None, creation_start_time=None, description=None, docid_list_resource_id=None, feature_list_resource_id=None, feature_sampling_rate=None, feature_size=None, feature_threshold=None, id=None, initialized_time=None, label_list_resource_id=None, labels=None, label_sampling_rate=None, label_threshold=None, metadata=None, name=None, state=None, tags=None, test_data_resource_id=None, test_data_set_id=None, test_data_size=None, test_rich_data_set_id=None, training_data_resource_id=None, training_data_set_id=None, training_data_size=None, training_rich_data_set_id=None, validation_data_resource_id=None, validation_data_set_id=None, validation_data_size=None, validation_rich_data_set_id=None):
        """
        ResourceSet - a model defined in Swagger
        """

        self._creation_end_time = None
        self._creation_start_time = None
        self._description = None
        self._docid_list_resource_id = None
        self._feature_list_resource_id = None
        self._feature_sampling_rate = None
        self._feature_size = None
        self._feature_threshold = None
        self._id = None
        self._initialized_time = None
        self._label_list_resource_id = None
        self._labels = None
        self._label_sampling_rate = None
        self._label_threshold = None
        self._metadata = None
        self._name = None
        self._state = None
        self._tags = None
        self._test_data_resource_id = None
        self._test_data_set_id = None
        self._test_data_size = None
        self._test_rich_data_set_id = None
        self._training_data_resource_id = None
        self._training_data_set_id = None
        self._training_data_size = None
        self._training_rich_data_set_id = None
        self._validation_data_resource_id = None
        self._validation_data_set_id = None
        self._validation_data_size = None
        self._validation_rich_data_set_id = None

        if creation_end_time is not None:
          self.creation_end_time = creation_end_time
        if creation_start_time is not None:
          self.creation_start_time = creation_start_time
        if description is not None:
          self.description = description
        if docid_list_resource_id is not None:
          self.docid_list_resource_id = docid_list_resource_id
        if feature_list_resource_id is not None:
          self.feature_list_resource_id = feature_list_resource_id
        if feature_sampling_rate is not None:
          self.feature_sampling_rate = feature_sampling_rate
        if feature_size is not None:
          self.feature_size = feature_size
        if feature_threshold is not None:
          self.feature_threshold = feature_threshold
        if id is not None:
          self.id = id
        if initialized_time is not None:
          self.initialized_time = initialized_time
        if label_list_resource_id is not None:
          self.label_list_resource_id = label_list_resource_id
        if labels is not None:
          self.labels = labels
        if label_sampling_rate is not None:
          self.label_sampling_rate = label_sampling_rate
        if label_threshold is not None:
          self.label_threshold = label_threshold
        if metadata is not None:
          self.metadata = metadata
        if name is not None:
          self.name = name
        if state is not None:
          self.state = state
        if tags is not None:
          self.tags = tags
        if test_data_resource_id is not None:
          self.test_data_resource_id = test_data_resource_id
        if test_data_set_id is not None:
          self.test_data_set_id = test_data_set_id
        if test_data_size is not None:
          self.test_data_size = test_data_size
        if test_rich_data_set_id is not None:
          self.test_rich_data_set_id = test_rich_data_set_id
        if training_data_resource_id is not None:
          self.training_data_resource_id = training_data_resource_id
        if training_data_set_id is not None:
          self.training_data_set_id = training_data_set_id
        if training_data_size is not None:
          self.training_data_size = training_data_size
        if training_rich_data_set_id is not None:
          self.training_rich_data_set_id = training_rich_data_set_id
        if validation_data_resource_id is not None:
          self.validation_data_resource_id = validation_data_resource_id
        if validation_data_set_id is not None:
          self.validation_data_set_id = validation_data_set_id
        if validation_data_size is not None:
          self.validation_data_size = validation_data_size
        if validation_rich_data_set_id is not None:
          self.validation_rich_data_set_id = validation_rich_data_set_id

    @property
    def creation_end_time(self):
        """
        Gets the creation_end_time of this ResourceSet.
        Timestamp when the resource set creation ends

        :return: The creation_end_time of this ResourceSet.
        :rtype: int
        """
        return self._creation_end_time

    @creation_end_time.setter
    def creation_end_time(self, creation_end_time):
        """
        Sets the creation_end_time of this ResourceSet.
        Timestamp when the resource set creation ends

        :param creation_end_time: The creation_end_time of this ResourceSet.
        :type: int
        """

        self._creation_end_time = creation_end_time

    @property
    def creation_start_time(self):
        """
        Gets the creation_start_time of this ResourceSet.
        Timestamp when the resource set creation starts

        :return: The creation_start_time of this ResourceSet.
        :rtype: int
        """
        return self._creation_start_time

    @creation_start_time.setter
    def creation_start_time(self, creation_start_time):
        """
        Sets the creation_start_time of this ResourceSet.
        Timestamp when the resource set creation starts

        :param creation_start_time: The creation_start_time of this ResourceSet.
        :type: int
        """

        self._creation_start_time = creation_start_time

    @property
    def description(self):
        """
        Gets the description of this ResourceSet.
        User-provided description

        :return: The description of this ResourceSet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ResourceSet.
        User-provided description

        :param description: The description of this ResourceSet.
        :type: str
        """

        self._description = description

    @property
    def docid_list_resource_id(self):
        """
        Gets the docid_list_resource_id of this ResourceSet.
        (Used by system)

        :return: The docid_list_resource_id of this ResourceSet.
        :rtype: str
        """
        return self._docid_list_resource_id

    @docid_list_resource_id.setter
    def docid_list_resource_id(self, docid_list_resource_id):
        """
        Sets the docid_list_resource_id of this ResourceSet.
        (Used by system)

        :param docid_list_resource_id: The docid_list_resource_id of this ResourceSet.
        :type: str
        """

        self._docid_list_resource_id = docid_list_resource_id

    @property
    def feature_list_resource_id(self):
        """
        Gets the feature_list_resource_id of this ResourceSet.
        (Used by system)

        :return: The feature_list_resource_id of this ResourceSet.
        :rtype: str
        """
        return self._feature_list_resource_id

    @feature_list_resource_id.setter
    def feature_list_resource_id(self, feature_list_resource_id):
        """
        Sets the feature_list_resource_id of this ResourceSet.
        (Used by system)

        :param feature_list_resource_id: The feature_list_resource_id of this ResourceSet.
        :type: str
        """

        self._feature_list_resource_id = feature_list_resource_id

    @property
    def feature_sampling_rate(self):
        """
        Gets the feature_sampling_rate of this ResourceSet.
        (Used by system)

        :return: The feature_sampling_rate of this ResourceSet.
        :rtype: float
        """
        return self._feature_sampling_rate

    @feature_sampling_rate.setter
    def feature_sampling_rate(self, feature_sampling_rate):
        """
        Sets the feature_sampling_rate of this ResourceSet.
        (Used by system)

        :param feature_sampling_rate: The feature_sampling_rate of this ResourceSet.
        :type: float
        """

        self._feature_sampling_rate = feature_sampling_rate

    @property
    def feature_size(self):
        """
        Gets the feature_size of this ResourceSet.
        Size of features

        :return: The feature_size of this ResourceSet.
        :rtype: int
        """
        return self._feature_size

    @feature_size.setter
    def feature_size(self, feature_size):
        """
        Sets the feature_size of this ResourceSet.
        Size of features

        :param feature_size: The feature_size of this ResourceSet.
        :type: int
        """

        self._feature_size = feature_size

    @property
    def feature_threshold(self):
        """
        Gets the feature_threshold of this ResourceSet.
        Threshold of occurrences to eliminate features

        :return: The feature_threshold of this ResourceSet.
        :rtype: int
        """
        return self._feature_threshold

    @feature_threshold.setter
    def feature_threshold(self, feature_threshold):
        """
        Sets the feature_threshold of this ResourceSet.
        Threshold of occurrences to eliminate features

        :param feature_threshold: The feature_threshold of this ResourceSet.
        :type: int
        """

        self._feature_threshold = feature_threshold

    @property
    def id(self):
        """
        Gets the id of this ResourceSet.
        ID

        :return: The id of this ResourceSet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ResourceSet.
        ID

        :param id: The id of this ResourceSet.
        :type: str
        """

        self._id = id

    @property
    def initialized_time(self):
        """
        Gets the initialized_time of this ResourceSet.
        Timestamp when the resource set is initialized

        :return: The initialized_time of this ResourceSet.
        :rtype: int
        """
        return self._initialized_time

    @initialized_time.setter
    def initialized_time(self, initialized_time):
        """
        Sets the initialized_time of this ResourceSet.
        Timestamp when the resource set is initialized

        :param initialized_time: The initialized_time of this ResourceSet.
        :type: int
        """

        self._initialized_time = initialized_time

    @property
    def label_list_resource_id(self):
        """
        Gets the label_list_resource_id of this ResourceSet.
        (Used by system)

        :return: The label_list_resource_id of this ResourceSet.
        :rtype: str
        """
        return self._label_list_resource_id

    @label_list_resource_id.setter
    def label_list_resource_id(self, label_list_resource_id):
        """
        Sets the label_list_resource_id of this ResourceSet.
        (Used by system)

        :param label_list_resource_id: The label_list_resource_id of this ResourceSet.
        :type: str
        """

        self._label_list_resource_id = label_list_resource_id

    @property
    def labels(self):
        """
        Gets the labels of this ResourceSet.
        A set of labels that the labeler can return

        :return: The labels of this ResourceSet.
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """
        Sets the labels of this ResourceSet.
        A set of labels that the labeler can return

        :param labels: The labels of this ResourceSet.
        :type: list[str]
        """

        self._labels = labels

    @property
    def label_sampling_rate(self):
        """
        Gets the label_sampling_rate of this ResourceSet.
        (Used by system)

        :return: The label_sampling_rate of this ResourceSet.
        :rtype: float
        """
        return self._label_sampling_rate

    @label_sampling_rate.setter
    def label_sampling_rate(self, label_sampling_rate):
        """
        Sets the label_sampling_rate of this ResourceSet.
        (Used by system)

        :param label_sampling_rate: The label_sampling_rate of this ResourceSet.
        :type: float
        """

        self._label_sampling_rate = label_sampling_rate

    @property
    def label_threshold(self):
        """
        Gets the label_threshold of this ResourceSet.
        Threshold of occurrences to eliminate labels

        :return: The label_threshold of this ResourceSet.
        :rtype: int
        """
        return self._label_threshold

    @label_threshold.setter
    def label_threshold(self, label_threshold):
        """
        Sets the label_threshold of this ResourceSet.
        Threshold of occurrences to eliminate labels

        :param label_threshold: The label_threshold of this ResourceSet.
        :type: int
        """

        self._label_threshold = label_threshold

    @property
    def metadata(self):
        """
        Gets the metadata of this ResourceSet.
        (Used by system)

        :return: The metadata of this ResourceSet.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this ResourceSet.
        (Used by system)

        :param metadata: The metadata of this ResourceSet.
        :type: object
        """

        self._metadata = metadata

    @property
    def name(self):
        """
        Gets the name of this ResourceSet.
        Name

        :return: The name of this ResourceSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ResourceSet.
        Name

        :param name: The name of this ResourceSet.
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """
        Gets the state of this ResourceSet.
        Current status of this resource set

        :return: The state of this ResourceSet.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ResourceSet.
        Current status of this resource set

        :param state: The state of this ResourceSet.
        :type: str
        """
        allowed_values = ["INITIAL", "CREATING_DATASETS", "FAILED_TO_CREATE_DATASETS", "CREATING", "FAILED_TO_CREATE", "READY_TO_TRAIN_MODELS", "REFERENCE"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tags(self):
        """
        Gets the tags of this ResourceSet.
        (Used by system)

        :return: The tags of this ResourceSet.
        :rtype: dict(str, object)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ResourceSet.
        (Used by system)

        :param tags: The tags of this ResourceSet.
        :type: dict(str, object)
        """

        self._tags = tags

    @property
    def test_data_resource_id(self):
        """
        Gets the test_data_resource_id of this ResourceSet.
        (Used by system)

        :return: The test_data_resource_id of this ResourceSet.
        :rtype: str
        """
        return self._test_data_resource_id

    @test_data_resource_id.setter
    def test_data_resource_id(self, test_data_resource_id):
        """
        Sets the test_data_resource_id of this ResourceSet.
        (Used by system)

        :param test_data_resource_id: The test_data_resource_id of this ResourceSet.
        :type: str
        """

        self._test_data_resource_id = test_data_resource_id

    @property
    def test_data_set_id(self):
        """
        Gets the test_data_set_id of this ResourceSet.
        (Used by system)

        :return: The test_data_set_id of this ResourceSet.
        :rtype: str
        """
        return self._test_data_set_id

    @test_data_set_id.setter
    def test_data_set_id(self, test_data_set_id):
        """
        Sets the test_data_set_id of this ResourceSet.
        (Used by system)

        :param test_data_set_id: The test_data_set_id of this ResourceSet.
        :type: str
        """

        self._test_data_set_id = test_data_set_id

    @property
    def test_data_size(self):
        """
        Gets the test_data_size of this ResourceSet.
        Number of documents in the test dataset

        :return: The test_data_size of this ResourceSet.
        :rtype: int
        """
        return self._test_data_size

    @test_data_size.setter
    def test_data_size(self, test_data_size):
        """
        Sets the test_data_size of this ResourceSet.
        Number of documents in the test dataset

        :param test_data_size: The test_data_size of this ResourceSet.
        :type: int
        """

        self._test_data_size = test_data_size

    @property
    def test_rich_data_set_id(self):
        """
        Gets the test_rich_data_set_id of this ResourceSet.
        (Used by system)

        :return: The test_rich_data_set_id of this ResourceSet.
        :rtype: str
        """
        return self._test_rich_data_set_id

    @test_rich_data_set_id.setter
    def test_rich_data_set_id(self, test_rich_data_set_id):
        """
        Sets the test_rich_data_set_id of this ResourceSet.
        (Used by system)

        :param test_rich_data_set_id: The test_rich_data_set_id of this ResourceSet.
        :type: str
        """

        self._test_rich_data_set_id = test_rich_data_set_id

    @property
    def training_data_resource_id(self):
        """
        Gets the training_data_resource_id of this ResourceSet.
        (Used by system)

        :return: The training_data_resource_id of this ResourceSet.
        :rtype: str
        """
        return self._training_data_resource_id

    @training_data_resource_id.setter
    def training_data_resource_id(self, training_data_resource_id):
        """
        Sets the training_data_resource_id of this ResourceSet.
        (Used by system)

        :param training_data_resource_id: The training_data_resource_id of this ResourceSet.
        :type: str
        """

        self._training_data_resource_id = training_data_resource_id

    @property
    def training_data_set_id(self):
        """
        Gets the training_data_set_id of this ResourceSet.
        (Used by system)

        :return: The training_data_set_id of this ResourceSet.
        :rtype: str
        """
        return self._training_data_set_id

    @training_data_set_id.setter
    def training_data_set_id(self, training_data_set_id):
        """
        Sets the training_data_set_id of this ResourceSet.
        (Used by system)

        :param training_data_set_id: The training_data_set_id of this ResourceSet.
        :type: str
        """

        self._training_data_set_id = training_data_set_id

    @property
    def training_data_size(self):
        """
        Gets the training_data_size of this ResourceSet.
        Number of documents in the training dataset

        :return: The training_data_size of this ResourceSet.
        :rtype: int
        """
        return self._training_data_size

    @training_data_size.setter
    def training_data_size(self, training_data_size):
        """
        Sets the training_data_size of this ResourceSet.
        Number of documents in the training dataset

        :param training_data_size: The training_data_size of this ResourceSet.
        :type: int
        """

        self._training_data_size = training_data_size

    @property
    def training_rich_data_set_id(self):
        """
        Gets the training_rich_data_set_id of this ResourceSet.
        (Used by system)

        :return: The training_rich_data_set_id of this ResourceSet.
        :rtype: str
        """
        return self._training_rich_data_set_id

    @training_rich_data_set_id.setter
    def training_rich_data_set_id(self, training_rich_data_set_id):
        """
        Sets the training_rich_data_set_id of this ResourceSet.
        (Used by system)

        :param training_rich_data_set_id: The training_rich_data_set_id of this ResourceSet.
        :type: str
        """

        self._training_rich_data_set_id = training_rich_data_set_id

    @property
    def validation_data_resource_id(self):
        """
        Gets the validation_data_resource_id of this ResourceSet.
        (Used by system)

        :return: The validation_data_resource_id of this ResourceSet.
        :rtype: str
        """
        return self._validation_data_resource_id

    @validation_data_resource_id.setter
    def validation_data_resource_id(self, validation_data_resource_id):
        """
        Sets the validation_data_resource_id of this ResourceSet.
        (Used by system)

        :param validation_data_resource_id: The validation_data_resource_id of this ResourceSet.
        :type: str
        """

        self._validation_data_resource_id = validation_data_resource_id

    @property
    def validation_data_set_id(self):
        """
        Gets the validation_data_set_id of this ResourceSet.
        (Used by system)

        :return: The validation_data_set_id of this ResourceSet.
        :rtype: str
        """
        return self._validation_data_set_id

    @validation_data_set_id.setter
    def validation_data_set_id(self, validation_data_set_id):
        """
        Sets the validation_data_set_id of this ResourceSet.
        (Used by system)

        :param validation_data_set_id: The validation_data_set_id of this ResourceSet.
        :type: str
        """

        self._validation_data_set_id = validation_data_set_id

    @property
    def validation_data_size(self):
        """
        Gets the validation_data_size of this ResourceSet.
        Number of documents in the validation dataset

        :return: The validation_data_size of this ResourceSet.
        :rtype: int
        """
        return self._validation_data_size

    @validation_data_size.setter
    def validation_data_size(self, validation_data_size):
        """
        Sets the validation_data_size of this ResourceSet.
        Number of documents in the validation dataset

        :param validation_data_size: The validation_data_size of this ResourceSet.
        :type: int
        """

        self._validation_data_size = validation_data_size

    @property
    def validation_rich_data_set_id(self):
        """
        Gets the validation_rich_data_set_id of this ResourceSet.
        (Used by system)

        :return: The validation_rich_data_set_id of this ResourceSet.
        :rtype: str
        """
        return self._validation_rich_data_set_id

    @validation_rich_data_set_id.setter
    def validation_rich_data_set_id(self, validation_rich_data_set_id):
        """
        Sets the validation_rich_data_set_id of this ResourceSet.
        (Used by system)

        :param validation_rich_data_set_id: The validation_rich_data_set_id of this ResourceSet.
        :type: str
        """

        self._validation_rich_data_set_id = validation_rich_data_set_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResourceSet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
