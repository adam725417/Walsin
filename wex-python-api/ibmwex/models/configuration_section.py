# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConfigurationSection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cardinality': 'str',
        'description': 'str',
        'hidden': 'bool',
        'label': 'str',
        'name': 'str',
        'parameters': 'list[ConfigurationParameter]',
        'title_parameter': 'str'
    }

    attribute_map = {
        'cardinality': 'cardinality',
        'description': 'description',
        'hidden': 'hidden',
        'label': 'label',
        'name': 'name',
        'parameters': 'parameters',
        'title_parameter': 'titleParameter'
    }

    def __init__(self, cardinality=None, description=None, hidden=None, label=None, name=None, parameters=None, title_parameter=None):
        """
        ConfigurationSection - a model defined in Swagger
        """

        self._cardinality = None
        self._description = None
        self._hidden = None
        self._label = None
        self._name = None
        self._parameters = None
        self._title_parameter = None

        if cardinality is not None:
          self.cardinality = cardinality
        if description is not None:
          self.description = description
        if hidden is not None:
          self.hidden = hidden
        if label is not None:
          self.label = label
        if name is not None:
          self.name = name
        if parameters is not None:
          self.parameters = parameters
        if title_parameter is not None:
          self.title_parameter = title_parameter

    @property
    def cardinality(self):
        """
        Gets the cardinality of this ConfigurationSection.

        :return: The cardinality of this ConfigurationSection.
        :rtype: str
        """
        return self._cardinality

    @cardinality.setter
    def cardinality(self, cardinality):
        """
        Sets the cardinality of this ConfigurationSection.

        :param cardinality: The cardinality of this ConfigurationSection.
        :type: str
        """
        allowed_values = ["SINGLE", "MULTIPLE"]
        if cardinality not in allowed_values:
            raise ValueError(
                "Invalid value for `cardinality` ({0}), must be one of {1}"
                .format(cardinality, allowed_values)
            )

        self._cardinality = cardinality

    @property
    def description(self):
        """
        Gets the description of this ConfigurationSection.

        :return: The description of this ConfigurationSection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ConfigurationSection.

        :param description: The description of this ConfigurationSection.
        :type: str
        """

        self._description = description

    @property
    def hidden(self):
        """
        Gets the hidden of this ConfigurationSection.

        :return: The hidden of this ConfigurationSection.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """
        Sets the hidden of this ConfigurationSection.

        :param hidden: The hidden of this ConfigurationSection.
        :type: bool
        """

        self._hidden = hidden

    @property
    def label(self):
        """
        Gets the label of this ConfigurationSection.

        :return: The label of this ConfigurationSection.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this ConfigurationSection.

        :param label: The label of this ConfigurationSection.
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """
        Gets the name of this ConfigurationSection.

        :return: The name of this ConfigurationSection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ConfigurationSection.

        :param name: The name of this ConfigurationSection.
        :type: str
        """

        self._name = name

    @property
    def parameters(self):
        """
        Gets the parameters of this ConfigurationSection.

        :return: The parameters of this ConfigurationSection.
        :rtype: list[ConfigurationParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this ConfigurationSection.

        :param parameters: The parameters of this ConfigurationSection.
        :type: list[ConfigurationParameter]
        """

        self._parameters = parameters

    @property
    def title_parameter(self):
        """
        Gets the title_parameter of this ConfigurationSection.

        :return: The title_parameter of this ConfigurationSection.
        :rtype: str
        """
        return self._title_parameter

    @title_parameter.setter
    def title_parameter(self, title_parameter):
        """
        Sets the title_parameter of this ConfigurationSection.

        :param title_parameter: The title_parameter of this ConfigurationSection.
        :type: str
        """

        self._title_parameter = title_parameter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConfigurationSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
