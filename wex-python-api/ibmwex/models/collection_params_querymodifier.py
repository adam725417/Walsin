# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CollectionParamsQuerymodifier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'querymodifier_analysis': 'bool',
        'querymodifier_minimum_required_terms': 'int',
        'analysis_fieldtype': 'str'
    }

    attribute_map = {
        'querymodifier_analysis': 'querymodifier.analysis',
        'querymodifier_minimum_required_terms': 'querymodifier.minimumRequiredTerms',
        'analysis_fieldtype': 'analysis.fieldtype'
    }

    def __init__(self, querymodifier_analysis=None, querymodifier_minimum_required_terms=None, analysis_fieldtype=None):
        """
        CollectionParamsQuerymodifier - a model defined in Swagger
        """

        self._querymodifier_analysis = None
        self._querymodifier_minimum_required_terms = None
        self._analysis_fieldtype = None

        if querymodifier_analysis is not None:
          self.querymodifier_analysis = querymodifier_analysis
        if querymodifier_minimum_required_terms is not None:
          self.querymodifier_minimum_required_terms = querymodifier_minimum_required_terms
        if analysis_fieldtype is not None:
          self.analysis_fieldtype = analysis_fieldtype

    @property
    def querymodifier_analysis(self):
        """
        Gets the querymodifier_analysis of this CollectionParamsQuerymodifier.

        :return: The querymodifier_analysis of this CollectionParamsQuerymodifier.
        :rtype: bool
        """
        return self._querymodifier_analysis

    @querymodifier_analysis.setter
    def querymodifier_analysis(self, querymodifier_analysis):
        """
        Sets the querymodifier_analysis of this CollectionParamsQuerymodifier.

        :param querymodifier_analysis: The querymodifier_analysis of this CollectionParamsQuerymodifier.
        :type: bool
        """

        self._querymodifier_analysis = querymodifier_analysis

    @property
    def querymodifier_minimum_required_terms(self):
        """
        Gets the querymodifier_minimum_required_terms of this CollectionParamsQuerymodifier.

        :return: The querymodifier_minimum_required_terms of this CollectionParamsQuerymodifier.
        :rtype: int
        """
        return self._querymodifier_minimum_required_terms

    @querymodifier_minimum_required_terms.setter
    def querymodifier_minimum_required_terms(self, querymodifier_minimum_required_terms):
        """
        Sets the querymodifier_minimum_required_terms of this CollectionParamsQuerymodifier.

        :param querymodifier_minimum_required_terms: The querymodifier_minimum_required_terms of this CollectionParamsQuerymodifier.
        :type: int
        """

        self._querymodifier_minimum_required_terms = querymodifier_minimum_required_terms

    @property
    def analysis_fieldtype(self):
        """
        Gets the analysis_fieldtype of this CollectionParamsQuerymodifier.

        :return: The analysis_fieldtype of this CollectionParamsQuerymodifier.
        :rtype: str
        """
        return self._analysis_fieldtype

    @analysis_fieldtype.setter
    def analysis_fieldtype(self, analysis_fieldtype):
        """
        Sets the analysis_fieldtype of this CollectionParamsQuerymodifier.

        :param analysis_fieldtype: The analysis_fieldtype of this CollectionParamsQuerymodifier.
        :type: str
        """

        self._analysis_fieldtype = analysis_fieldtype

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CollectionParamsQuerymodifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
