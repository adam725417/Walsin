# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UpdateInterval(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dates': 'str',
        'days': 'str',
        'interval_days': 'int',
        'interval_hours': 'int',
        'interval_minutes': 'int',
        'time_of_day': 'str',
        'type': 'str'
    }

    attribute_map = {
        'dates': 'dates',
        'days': 'days',
        'interval_days': 'intervalDays',
        'interval_hours': 'intervalHours',
        'interval_minutes': 'intervalMinutes',
        'time_of_day': 'timeOfDay',
        'type': 'type'
    }

    def __init__(self, dates=None, days=None, interval_days=None, interval_hours=None, interval_minutes=None, time_of_day=None, type=None):
        """
        UpdateInterval - a model defined in Swagger
        """

        self._dates = None
        self._days = None
        self._interval_days = None
        self._interval_hours = None
        self._interval_minutes = None
        self._time_of_day = None
        self._type = None

        if dates is not None:
          self.dates = dates
        if days is not None:
          self.days = days
        if interval_days is not None:
          self.interval_days = interval_days
        if interval_hours is not None:
          self.interval_hours = interval_hours
        if interval_minutes is not None:
          self.interval_minutes = interval_minutes
        if time_of_day is not None:
          self.time_of_day = time_of_day
        if type is not None:
          self.type = type

    @property
    def dates(self):
        """
        Gets the dates of this UpdateInterval.

        :return: The dates of this UpdateInterval.
        :rtype: str
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """
        Sets the dates of this UpdateInterval.

        :param dates: The dates of this UpdateInterval.
        :type: str
        """

        self._dates = dates

    @property
    def days(self):
        """
        Gets the days of this UpdateInterval.

        :return: The days of this UpdateInterval.
        :rtype: str
        """
        return self._days

    @days.setter
    def days(self, days):
        """
        Sets the days of this UpdateInterval.

        :param days: The days of this UpdateInterval.
        :type: str
        """

        self._days = days

    @property
    def interval_days(self):
        """
        Gets the interval_days of this UpdateInterval.

        :return: The interval_days of this UpdateInterval.
        :rtype: int
        """
        return self._interval_days

    @interval_days.setter
    def interval_days(self, interval_days):
        """
        Sets the interval_days of this UpdateInterval.

        :param interval_days: The interval_days of this UpdateInterval.
        :type: int
        """

        self._interval_days = interval_days

    @property
    def interval_hours(self):
        """
        Gets the interval_hours of this UpdateInterval.

        :return: The interval_hours of this UpdateInterval.
        :rtype: int
        """
        return self._interval_hours

    @interval_hours.setter
    def interval_hours(self, interval_hours):
        """
        Sets the interval_hours of this UpdateInterval.

        :param interval_hours: The interval_hours of this UpdateInterval.
        :type: int
        """

        self._interval_hours = interval_hours

    @property
    def interval_minutes(self):
        """
        Gets the interval_minutes of this UpdateInterval.

        :return: The interval_minutes of this UpdateInterval.
        :rtype: int
        """
        return self._interval_minutes

    @interval_minutes.setter
    def interval_minutes(self, interval_minutes):
        """
        Sets the interval_minutes of this UpdateInterval.

        :param interval_minutes: The interval_minutes of this UpdateInterval.
        :type: int
        """

        self._interval_minutes = interval_minutes

    @property
    def time_of_day(self):
        """
        Gets the time_of_day of this UpdateInterval.

        :return: The time_of_day of this UpdateInterval.
        :rtype: str
        """
        return self._time_of_day

    @time_of_day.setter
    def time_of_day(self, time_of_day):
        """
        Sets the time_of_day of this UpdateInterval.

        :param time_of_day: The time_of_day of this UpdateInterval.
        :type: str
        """

        self._time_of_day = time_of_day

    @property
    def type(self):
        """
        Gets the type of this UpdateInterval.

        :return: The type of this UpdateInterval.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this UpdateInterval.

        :param type: The type of this UpdateInterval.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UpdateInterval):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
