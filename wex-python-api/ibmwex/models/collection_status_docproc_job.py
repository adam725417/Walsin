# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CollectionStatusDocprocJob(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update': 'int',
        'queued_documents': 'int',
        'completed_documents': 'int'
    }

    attribute_map = {
        'last_update': 'lastUpdate',
        'queued_documents': 'queuedDocuments',
        'completed_documents': 'completedDocuments'
    }

    def __init__(self, last_update=None, queued_documents=None, completed_documents=None):
        """
        CollectionStatusDocprocJob - a model defined in Swagger
        """

        self._last_update = None
        self._queued_documents = None
        self._completed_documents = None

        if last_update is not None:
          self.last_update = last_update
        if queued_documents is not None:
          self.queued_documents = queued_documents
        if completed_documents is not None:
          self.completed_documents = completed_documents

    @property
    def last_update(self):
        """
        Gets the last_update of this CollectionStatusDocprocJob.

        :return: The last_update of this CollectionStatusDocprocJob.
        :rtype: int
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """
        Sets the last_update of this CollectionStatusDocprocJob.

        :param last_update: The last_update of this CollectionStatusDocprocJob.
        :type: int
        """

        self._last_update = last_update

    @property
    def queued_documents(self):
        """
        Gets the queued_documents of this CollectionStatusDocprocJob.

        :return: The queued_documents of this CollectionStatusDocprocJob.
        :rtype: int
        """
        return self._queued_documents

    @queued_documents.setter
    def queued_documents(self, queued_documents):
        """
        Sets the queued_documents of this CollectionStatusDocprocJob.

        :param queued_documents: The queued_documents of this CollectionStatusDocprocJob.
        :type: int
        """

        self._queued_documents = queued_documents

    @property
    def completed_documents(self):
        """
        Gets the completed_documents of this CollectionStatusDocprocJob.

        :return: The completed_documents of this CollectionStatusDocprocJob.
        :rtype: int
        """
        return self._completed_documents

    @completed_documents.setter
    def completed_documents(self, completed_documents):
        """
        Sets the completed_documents of this CollectionStatusDocprocJob.

        :param completed_documents: The completed_documents of this CollectionStatusDocprocJob.
        :type: int
        """

        self._completed_documents = completed_documents

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CollectionStatusDocprocJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
