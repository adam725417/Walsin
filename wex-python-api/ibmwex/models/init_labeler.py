# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InitLabeler(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'description': 'str',
        'ground_truth_label_facet': 'str',
        'name': 'str',
        'predicted_label_facet': 'str',
        'source_dataset_id': 'str'
    }

    attribute_map = {
        'type': '@type',
        'description': 'description',
        'ground_truth_label_facet': 'groundTruthLabelFacet',
        'name': 'name',
        'predicted_label_facet': 'predictedLabelFacet',
        'source_dataset_id': 'sourceDatasetId'
    }

    def __init__(self, type='Labeler', description=None, ground_truth_label_facet=None, name=None, predicted_label_facet=None, source_dataset_id=None):
        """
        InitLabeler - a model defined in Swagger
        """

        self._type = None
        self._description = None
        self._ground_truth_label_facet = None
        self._name = None
        self._predicted_label_facet = None
        self._source_dataset_id = None

        self.type = type
        if description is not None:
          self.description = description
        self.ground_truth_label_facet = ground_truth_label_facet
        if name is not None:
          self.name = name
        self.predicted_label_facet = predicted_label_facet
        self.source_dataset_id = source_dataset_id

    @property
    def type(self):
        """
        Gets the type of this InitLabeler.
        Required property to deserialize the JSON string correctly

        :return: The type of this InitLabeler.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this InitLabeler.
        Required property to deserialize the JSON string correctly

        :param type: The type of this InitLabeler.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def description(self):
        """
        Gets the description of this InitLabeler.
        Description of the labeler

        :return: The description of this InitLabeler.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InitLabeler.
        Description of the labeler

        :param description: The description of this InitLabeler.
        :type: str
        """

        self._description = description

    @property
    def ground_truth_label_facet(self):
        """
        Gets the ground_truth_label_facet of this InitLabeler.
        Name of the answer field that contains correct labels of a document

        :return: The ground_truth_label_facet of this InitLabeler.
        :rtype: str
        """
        return self._ground_truth_label_facet

    @ground_truth_label_facet.setter
    def ground_truth_label_facet(self, ground_truth_label_facet):
        """
        Sets the ground_truth_label_facet of this InitLabeler.
        Name of the answer field that contains correct labels of a document

        :param ground_truth_label_facet: The ground_truth_label_facet of this InitLabeler.
        :type: str
        """
        if ground_truth_label_facet is None:
            raise ValueError("Invalid value for `ground_truth_label_facet`, must not be `None`")

        self._ground_truth_label_facet = ground_truth_label_facet

    @property
    def name(self):
        """
        Gets the name of this InitLabeler.
        Name

        :return: The name of this InitLabeler.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InitLabeler.
        Name

        :param name: The name of this InitLabeler.
        :type: str
        """

        self._name = name

    @property
    def predicted_label_facet(self):
        """
        Gets the predicted_label_facet of this InitLabeler.
        Name of the field that contains predicted labels given by this labeler

        :return: The predicted_label_facet of this InitLabeler.
        :rtype: str
        """
        return self._predicted_label_facet

    @predicted_label_facet.setter
    def predicted_label_facet(self, predicted_label_facet):
        """
        Sets the predicted_label_facet of this InitLabeler.
        Name of the field that contains predicted labels given by this labeler

        :param predicted_label_facet: The predicted_label_facet of this InitLabeler.
        :type: str
        """
        if predicted_label_facet is None:
            raise ValueError("Invalid value for `predicted_label_facet`, must not be `None`")

        self._predicted_label_facet = predicted_label_facet

    @property
    def source_dataset_id(self):
        """
        Gets the source_dataset_id of this InitLabeler.
        ID of the training dataset provided when creating this labeler

        :return: The source_dataset_id of this InitLabeler.
        :rtype: str
        """
        return self._source_dataset_id

    @source_dataset_id.setter
    def source_dataset_id(self, source_dataset_id):
        """
        Sets the source_dataset_id of this InitLabeler.
        ID of the training dataset provided when creating this labeler

        :param source_dataset_id: The source_dataset_id of this InitLabeler.
        :type: str
        """
        if source_dataset_id is None:
            raise ValueError("Invalid value for `source_dataset_id`, must not be `None`")

        self._source_dataset_id = source_dataset_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InitLabeler):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
