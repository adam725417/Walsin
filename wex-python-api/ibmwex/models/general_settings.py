# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GeneralSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'converter_name': 'str',
        'type_in': 'list[str]',
        'type_out': 'str'
    }

    attribute_map = {
        'converter_name': 'converterName',
        'type_in': 'typeIn',
        'type_out': 'typeOut'
    }

    def __init__(self, converter_name=None, type_in=None, type_out=None):
        """
        GeneralSettings - a model defined in Swagger
        """

        self._converter_name = None
        self._type_in = None
        self._type_out = None

        if converter_name is not None:
          self.converter_name = converter_name
        if type_in is not None:
          self.type_in = type_in
        if type_out is not None:
          self.type_out = type_out

    @property
    def converter_name(self):
        """
        Gets the converter_name of this GeneralSettings.

        :return: The converter_name of this GeneralSettings.
        :rtype: str
        """
        return self._converter_name

    @converter_name.setter
    def converter_name(self, converter_name):
        """
        Sets the converter_name of this GeneralSettings.

        :param converter_name: The converter_name of this GeneralSettings.
        :type: str
        """

        self._converter_name = converter_name

    @property
    def type_in(self):
        """
        Gets the type_in of this GeneralSettings.

        :return: The type_in of this GeneralSettings.
        :rtype: list[str]
        """
        return self._type_in

    @type_in.setter
    def type_in(self, type_in):
        """
        Sets the type_in of this GeneralSettings.

        :param type_in: The type_in of this GeneralSettings.
        :type: list[str]
        """

        self._type_in = type_in

    @property
    def type_out(self):
        """
        Gets the type_out of this GeneralSettings.

        :return: The type_out of this GeneralSettings.
        :rtype: str
        """
        return self._type_out

    @type_out.setter
    def type_out(self, type_out):
        """
        Sets the type_out of this GeneralSettings.

        :param type_out: The type_out of this GeneralSettings.
        :type: str
        """

        self._type_out = type_out

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GeneralSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
