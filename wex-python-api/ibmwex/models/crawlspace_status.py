# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CrawlspaceStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crawled': 'int',
        'deleted': 'int',
        'end_time': 'int',
        'error_message': 'str',
        'inserted': 'int',
        'name': 'str',
        'start_time': 'int',
        'status': 'str',
        'updated': 'int'
    }

    attribute_map = {
        'crawled': 'crawled',
        'deleted': 'deleted',
        'end_time': 'endTime',
        'error_message': 'errorMessage',
        'inserted': 'inserted',
        'name': 'name',
        'start_time': 'startTime',
        'status': 'status',
        'updated': 'updated'
    }

    def __init__(self, crawled=None, deleted=None, end_time=None, error_message=None, inserted=None, name=None, start_time=None, status=None, updated=None):
        """
        CrawlspaceStatus - a model defined in Swagger
        """

        self._crawled = None
        self._deleted = None
        self._end_time = None
        self._error_message = None
        self._inserted = None
        self._name = None
        self._start_time = None
        self._status = None
        self._updated = None

        if crawled is not None:
          self.crawled = crawled
        if deleted is not None:
          self.deleted = deleted
        if end_time is not None:
          self.end_time = end_time
        if error_message is not None:
          self.error_message = error_message
        if inserted is not None:
          self.inserted = inserted
        if name is not None:
          self.name = name
        if start_time is not None:
          self.start_time = start_time
        if status is not None:
          self.status = status
        if updated is not None:
          self.updated = updated

    @property
    def crawled(self):
        """
        Gets the crawled of this CrawlspaceStatus.

        :return: The crawled of this CrawlspaceStatus.
        :rtype: int
        """
        return self._crawled

    @crawled.setter
    def crawled(self, crawled):
        """
        Sets the crawled of this CrawlspaceStatus.

        :param crawled: The crawled of this CrawlspaceStatus.
        :type: int
        """

        self._crawled = crawled

    @property
    def deleted(self):
        """
        Gets the deleted of this CrawlspaceStatus.

        :return: The deleted of this CrawlspaceStatus.
        :rtype: int
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this CrawlspaceStatus.

        :param deleted: The deleted of this CrawlspaceStatus.
        :type: int
        """

        self._deleted = deleted

    @property
    def end_time(self):
        """
        Gets the end_time of this CrawlspaceStatus.

        :return: The end_time of this CrawlspaceStatus.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this CrawlspaceStatus.

        :param end_time: The end_time of this CrawlspaceStatus.
        :type: int
        """

        self._end_time = end_time

    @property
    def error_message(self):
        """
        Gets the error_message of this CrawlspaceStatus.

        :return: The error_message of this CrawlspaceStatus.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this CrawlspaceStatus.

        :param error_message: The error_message of this CrawlspaceStatus.
        :type: str
        """

        self._error_message = error_message

    @property
    def inserted(self):
        """
        Gets the inserted of this CrawlspaceStatus.

        :return: The inserted of this CrawlspaceStatus.
        :rtype: int
        """
        return self._inserted

    @inserted.setter
    def inserted(self, inserted):
        """
        Sets the inserted of this CrawlspaceStatus.

        :param inserted: The inserted of this CrawlspaceStatus.
        :type: int
        """

        self._inserted = inserted

    @property
    def name(self):
        """
        Gets the name of this CrawlspaceStatus.

        :return: The name of this CrawlspaceStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CrawlspaceStatus.

        :param name: The name of this CrawlspaceStatus.
        :type: str
        """

        self._name = name

    @property
    def start_time(self):
        """
        Gets the start_time of this CrawlspaceStatus.

        :return: The start_time of this CrawlspaceStatus.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this CrawlspaceStatus.

        :param start_time: The start_time of this CrawlspaceStatus.
        :type: int
        """

        self._start_time = start_time

    @property
    def status(self):
        """
        Gets the status of this CrawlspaceStatus.

        :return: The status of this CrawlspaceStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CrawlspaceStatus.

        :param status: The status of this CrawlspaceStatus.
        :type: str
        """
        allowed_values = ["Waiting", "Crawling", "Completed", "Errored", "Unknown"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated(self):
        """
        Gets the updated of this CrawlspaceStatus.

        :return: The updated of this CrawlspaceStatus.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this CrawlspaceStatus.

        :param updated: The updated of this CrawlspaceStatus.
        :type: int
        """

        self._updated = updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CrawlspaceStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
