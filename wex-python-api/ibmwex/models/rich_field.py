# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RichField(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotations': 'list[Annotation]',
        'facets': 'IterableFacet',
        'features': 'list[Features]',
        'properties': 'dict(str, str)',
        'text': 'str'
    }

    attribute_map = {
        'annotations': 'annotations',
        'facets': 'facets',
        'features': 'features',
        'properties': 'properties',
        'text': 'text'
    }

    def __init__(self, annotations=None, facets=None, features=None, properties=None, text=None):
        """
        RichField - a model defined in Swagger
        """

        self._annotations = None
        self._facets = None
        self._features = None
        self._properties = None
        self._text = None

        if annotations is not None:
          self.annotations = annotations
        if facets is not None:
          self.facets = facets
        if features is not None:
          self.features = features
        if properties is not None:
          self.properties = properties
        if text is not None:
          self.text = text

    @property
    def annotations(self):
        """
        Gets the annotations of this RichField.

        :return: The annotations of this RichField.
        :rtype: list[Annotation]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """
        Sets the annotations of this RichField.

        :param annotations: The annotations of this RichField.
        :type: list[Annotation]
        """

        self._annotations = annotations

    @property
    def facets(self):
        """
        Gets the facets of this RichField.

        :return: The facets of this RichField.
        :rtype: IterableFacet
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """
        Sets the facets of this RichField.

        :param facets: The facets of this RichField.
        :type: IterableFacet
        """

        self._facets = facets

    @property
    def features(self):
        """
        Gets the features of this RichField.

        :return: The features of this RichField.
        :rtype: list[Features]
        """
        return self._features

    @features.setter
    def features(self, features):
        """
        Sets the features of this RichField.

        :param features: The features of this RichField.
        :type: list[Features]
        """

        self._features = features

    @property
    def properties(self):
        """
        Gets the properties of this RichField.

        :return: The properties of this RichField.
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """
        Sets the properties of this RichField.

        :param properties: The properties of this RichField.
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def text(self):
        """
        Gets the text of this RichField.

        :return: The text of this RichField.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this RichField.

        :param text: The text of this RichField.
        :type: str
        """

        self._text = text

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RichField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
