# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExportRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'fields': 'object',
        'facets': 'object',
        'options': 'object',
        'encoding': 'str',
        'tag': 'str',
        'output_type': 'str'
    }

    attribute_map = {
        'query': 'query',
        'fields': 'fields',
        'facets': 'facets',
        'options': 'options',
        'encoding': 'encoding',
        'tag': 'tag',
        'output_type': 'outputType'
    }

    def __init__(self, query=None, fields=None, facets=None, options=None, encoding='UTF-8', tag=None, output_type='CSV'):
        """
        ExportRequest - a model defined in Swagger
        """

        self._query = None
        self._fields = None
        self._facets = None
        self._options = None
        self._encoding = None
        self._tag = None
        self._output_type = None

        self.query = query
        if fields is not None:
          self.fields = fields
        if facets is not None:
          self.facets = facets
        if options is not None:
          self.options = options
        if encoding is not None:
          self.encoding = encoding
        if tag is not None:
          self.tag = tag
        if output_type is not None:
          self.output_type = output_type

    @property
    def query(self):
        """
        Gets the query of this ExportRequest.
        Query to specify documents to be exported

        :return: The query of this ExportRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this ExportRequest.
        Query to specify documents to be exported

        :param query: The query of this ExportRequest.
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def fields(self):
        """
        Gets the fields of this ExportRequest.
        Map of the fields to be exported. - CSV : Empty value makes field as column or name of the dimension table. - JSON: Ignored 

        :return: The fields of this ExportRequest.
        :rtype: object
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """
        Sets the fields of this ExportRequest.
        Map of the fields to be exported. - CSV : Empty value makes field as column or name of the dimension table. - JSON: Ignored 

        :param fields: The fields of this ExportRequest.
        :type: object
        """

        self._fields = fields

    @property
    def facets(self):
        """
        Gets the facets of this ExportRequest.
        Map of the facets to be exported. - CSV : Must be a name of the dimension table. - JSON: Ignored Note: Only facets on exported fields will be exported. 

        :return: The facets of this ExportRequest.
        :rtype: object
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """
        Sets the facets of this ExportRequest.
        Map of the facets to be exported. - CSV : Must be a name of the dimension table. - JSON: Ignored Note: Only facets on exported fields will be exported. 

        :param facets: The facets of this ExportRequest.
        :type: object
        """

        self._facets = facets

    @property
    def options(self):
        """
        Gets the options of this ExportRequest.
        Exporter options

        :return: The options of this ExportRequest.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this ExportRequest.
        Exporter options

        :param options: The options of this ExportRequest.
        :type: object
        """

        self._options = options

    @property
    def encoding(self):
        """
        Gets the encoding of this ExportRequest.
        Encoding of the output files

        :return: The encoding of this ExportRequest.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """
        Sets the encoding of this ExportRequest.
        Encoding of the output files

        :param encoding: The encoding of this ExportRequest.
        :type: str
        """

        self._encoding = encoding

    @property
    def tag(self):
        """
        Gets the tag of this ExportRequest.
        Extra tag to filter jobs

        :return: The tag of this ExportRequest.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this ExportRequest.
        Extra tag to filter jobs

        :param tag: The tag of this ExportRequest.
        :type: str
        """

        self._tag = tag

    @property
    def output_type(self):
        """
        Gets the output_type of this ExportRequest.
        Output plugin type

        :return: The output_type of this ExportRequest.
        :rtype: str
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """
        Sets the output_type of this ExportRequest.
        Output plugin type

        :param output_type: The output_type of this ExportRequest.
        :type: str
        """
        allowed_values = ["CSV", "JSON"]
        if output_type not in allowed_values:
            raise ValueError(
                "Invalid value for `output_type` ({0}), must be one of {1}"
                .format(output_type, allowed_values)
            )

        self._output_type = output_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
