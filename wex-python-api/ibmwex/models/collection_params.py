# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CollectionParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_output': 'CollectionParamsDefaultOutput',
        'select': 'CollectionParamsSelect',
        'query': 'CollectionParamsQuery',
        'querymodifier': 'CollectionParamsQuerymodifier',
        'highlighting': 'CollectionParamsHighlighting'
    }

    attribute_map = {
        'default_output': 'defaultOutput',
        'select': 'select',
        'query': 'query',
        'querymodifier': 'querymodifier',
        'highlighting': 'highlighting'
    }

    def __init__(self, default_output=None, select=None, query=None, querymodifier=None, highlighting=None):
        """
        CollectionParams - a model defined in Swagger
        """

        self._default_output = None
        self._select = None
        self._query = None
        self._querymodifier = None
        self._highlighting = None

        if default_output is not None:
          self.default_output = default_output
        if select is not None:
          self.select = select
        if query is not None:
          self.query = query
        if querymodifier is not None:
          self.querymodifier = querymodifier
        if highlighting is not None:
          self.highlighting = highlighting

    @property
    def default_output(self):
        """
        Gets the default_output of this CollectionParams.

        :return: The default_output of this CollectionParams.
        :rtype: CollectionParamsDefaultOutput
        """
        return self._default_output

    @default_output.setter
    def default_output(self, default_output):
        """
        Sets the default_output of this CollectionParams.

        :param default_output: The default_output of this CollectionParams.
        :type: CollectionParamsDefaultOutput
        """

        self._default_output = default_output

    @property
    def select(self):
        """
        Gets the select of this CollectionParams.

        :return: The select of this CollectionParams.
        :rtype: CollectionParamsSelect
        """
        return self._select

    @select.setter
    def select(self, select):
        """
        Sets the select of this CollectionParams.

        :param select: The select of this CollectionParams.
        :type: CollectionParamsSelect
        """

        self._select = select

    @property
    def query(self):
        """
        Gets the query of this CollectionParams.

        :return: The query of this CollectionParams.
        :rtype: CollectionParamsQuery
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this CollectionParams.

        :param query: The query of this CollectionParams.
        :type: CollectionParamsQuery
        """

        self._query = query

    @property
    def querymodifier(self):
        """
        Gets the querymodifier of this CollectionParams.

        :return: The querymodifier of this CollectionParams.
        :rtype: CollectionParamsQuerymodifier
        """
        return self._querymodifier

    @querymodifier.setter
    def querymodifier(self, querymodifier):
        """
        Sets the querymodifier of this CollectionParams.

        :param querymodifier: The querymodifier of this CollectionParams.
        :type: CollectionParamsQuerymodifier
        """

        self._querymodifier = querymodifier

    @property
    def highlighting(self):
        """
        Gets the highlighting of this CollectionParams.

        :return: The highlighting of this CollectionParams.
        :rtype: CollectionParamsHighlighting
        """
        return self._highlighting

    @highlighting.setter
    def highlighting(self, highlighting):
        """
        Sets the highlighting of this CollectionParams.

        :param highlighting: The highlighting of this CollectionParams.
        :type: CollectionParamsHighlighting
        """

        self._highlighting = highlighting

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CollectionParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
