# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExportStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'last_modified': 'float',
        'tags': 'list[str]',
        'state': 'str',
        'result': 'ExportResponse'
    }

    attribute_map = {
        'id': 'id',
        'last_modified': 'lastModified',
        'tags': 'tags',
        'state': 'state',
        'result': 'result'
    }

    def __init__(self, id=None, last_modified=None, tags=None, state=None, result=None):
        """
        ExportStatus - a model defined in Swagger
        """

        self._id = None
        self._last_modified = None
        self._tags = None
        self._state = None
        self._result = None

        if id is not None:
          self.id = id
        if last_modified is not None:
          self.last_modified = last_modified
        if tags is not None:
          self.tags = tags
        if state is not None:
          self.state = state
        if result is not None:
          self.result = result

    @property
    def id(self):
        """
        Gets the id of this ExportStatus.
        Job ID

        :return: The id of this ExportStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ExportStatus.
        Job ID

        :param id: The id of this ExportStatus.
        :type: str
        """

        self._id = id

    @property
    def last_modified(self):
        """
        Gets the last_modified of this ExportStatus.
        Last modified time in epoch (ms)

        :return: The last_modified of this ExportStatus.
        :rtype: float
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """
        Sets the last_modified of this ExportStatus.
        Last modified time in epoch (ms)

        :param last_modified: The last_modified of this ExportStatus.
        :type: float
        """

        self._last_modified = last_modified

    @property
    def tags(self):
        """
        Gets the tags of this ExportStatus.
        System generated and user tags.

        :return: The tags of this ExportStatus.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ExportStatus.
        System generated and user tags.

        :param tags: The tags of this ExportStatus.
        :type: list[str]
        """

        self._tags = tags

    @property
    def state(self):
        """
        Gets the state of this ExportStatus.
        State of the job

        :return: The state of this ExportStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this ExportStatus.
        State of the job

        :param state: The state of this ExportStatus.
        :type: str
        """
        allowed_values = ["Running", "Queued", "Success", "Error", "NotFound"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def result(self):
        """
        Gets the result of this ExportStatus.

        :return: The result of this ExportStatus.
        :rtype: ExportResponse
        """
        return self._result

    @result.setter
    def result(self, result):
        """
        Sets the result of this ExportStatus.

        :param result: The result of this ExportStatus.
        :type: ExportResponse
        """

        self._result = result

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExportStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
