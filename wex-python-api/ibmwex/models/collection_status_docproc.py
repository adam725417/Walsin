# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CollectionStatusDocproc(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_id': 'str',
        'datasets': 'list[CollectionStatusDocprocDatasets]',
        'number_of_indexed_docs': 'int',
        'state': 'str',
        'completed': 'bool'
    }

    attribute_map = {
        'collection_id': 'collectionID',
        'datasets': 'datasets',
        'number_of_indexed_docs': 'numberOfIndexedDocs',
        'state': 'state',
        'completed': 'completed'
    }

    def __init__(self, collection_id=None, datasets=None, number_of_indexed_docs=None, state=None, completed=None):
        """
        CollectionStatusDocproc - a model defined in Swagger
        """

        self._collection_id = None
        self._datasets = None
        self._number_of_indexed_docs = None
        self._state = None
        self._completed = None

        if collection_id is not None:
          self.collection_id = collection_id
        if datasets is not None:
          self.datasets = datasets
        if number_of_indexed_docs is not None:
          self.number_of_indexed_docs = number_of_indexed_docs
        if state is not None:
          self.state = state
        if completed is not None:
          self.completed = completed

    @property
    def collection_id(self):
        """
        Gets the collection_id of this CollectionStatusDocproc.

        :return: The collection_id of this CollectionStatusDocproc.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """
        Sets the collection_id of this CollectionStatusDocproc.

        :param collection_id: The collection_id of this CollectionStatusDocproc.
        :type: str
        """

        self._collection_id = collection_id

    @property
    def datasets(self):
        """
        Gets the datasets of this CollectionStatusDocproc.

        :return: The datasets of this CollectionStatusDocproc.
        :rtype: list[CollectionStatusDocprocDatasets]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """
        Sets the datasets of this CollectionStatusDocproc.

        :param datasets: The datasets of this CollectionStatusDocproc.
        :type: list[CollectionStatusDocprocDatasets]
        """

        self._datasets = datasets

    @property
    def number_of_indexed_docs(self):
        """
        Gets the number_of_indexed_docs of this CollectionStatusDocproc.

        :return: The number_of_indexed_docs of this CollectionStatusDocproc.
        :rtype: int
        """
        return self._number_of_indexed_docs

    @number_of_indexed_docs.setter
    def number_of_indexed_docs(self, number_of_indexed_docs):
        """
        Sets the number_of_indexed_docs of this CollectionStatusDocproc.

        :param number_of_indexed_docs: The number_of_indexed_docs of this CollectionStatusDocproc.
        :type: int
        """

        self._number_of_indexed_docs = number_of_indexed_docs

    @property
    def state(self):
        """
        Gets the state of this CollectionStatusDocproc.

        :return: The state of this CollectionStatusDocproc.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CollectionStatusDocproc.

        :param state: The state of this CollectionStatusDocproc.
        :type: str
        """

        self._state = state

    @property
    def completed(self):
        """
        Gets the completed of this CollectionStatusDocproc.

        :return: The completed of this CollectionStatusDocproc.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """
        Sets the completed of this CollectionStatusDocproc.

        :param completed: The completed of this CollectionStatusDocproc.
        :type: bool
        """

        self._completed = completed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CollectionStatusDocproc):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
