# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class WordType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ftr': 'list[ValType]',
        'lemma': 'ValType',
        'mtime': 'int',
        'pos': 'str',
        'surface': 'list[ValType]'
    }

    attribute_map = {
        'ftr': 'ftr',
        'lemma': 'lemma',
        'mtime': 'mtime',
        'pos': 'pos',
        'surface': 'surface'
    }

    def __init__(self, ftr=None, lemma=None, mtime=None, pos=None, surface=None):
        """
        WordType - a model defined in Swagger
        """

        self._ftr = None
        self._lemma = None
        self._mtime = None
        self._pos = None
        self._surface = None

        if ftr is not None:
          self.ftr = ftr
        if lemma is not None:
          self.lemma = lemma
        if mtime is not None:
          self.mtime = mtime
        if pos is not None:
          self.pos = pos
        self.surface = surface

    @property
    def ftr(self):
        """
        Gets the ftr of this WordType.

        :return: The ftr of this WordType.
        :rtype: list[ValType]
        """
        return self._ftr

    @ftr.setter
    def ftr(self, ftr):
        """
        Sets the ftr of this WordType.

        :param ftr: The ftr of this WordType.
        :type: list[ValType]
        """

        self._ftr = ftr

    @property
    def lemma(self):
        """
        Gets the lemma of this WordType.

        :return: The lemma of this WordType.
        :rtype: ValType
        """
        return self._lemma

    @lemma.setter
    def lemma(self, lemma):
        """
        Sets the lemma of this WordType.

        :param lemma: The lemma of this WordType.
        :type: ValType
        """

        self._lemma = lemma

    @property
    def mtime(self):
        """
        Gets the mtime of this WordType.

        :return: The mtime of this WordType.
        :rtype: int
        """
        return self._mtime

    @mtime.setter
    def mtime(self, mtime):
        """
        Sets the mtime of this WordType.

        :param mtime: The mtime of this WordType.
        :type: int
        """

        self._mtime = mtime

    @property
    def pos(self):
        """
        Gets the pos of this WordType.

        :return: The pos of this WordType.
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """
        Sets the pos of this WordType.

        :param pos: The pos of this WordType.
        :type: str
        """

        self._pos = pos

    @property
    def surface(self):
        """
        Gets the surface of this WordType.

        :return: The surface of this WordType.
        :rtype: list[ValType]
        """
        return self._surface

    @surface.setter
    def surface(self, surface):
        """
        Sets the surface of this WordType.

        :param surface: The surface of this WordType.
        :type: list[ValType]
        """
        if surface is None:
            raise ValueError("Invalid value for `surface`, must not be `None`")

        self._surface = surface

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, WordType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
