# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CollectionParamsQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'def_type': 'str',
        'sow': 'bool',
        'q_op': 'str',
        'bigram': 'str',
        'bigram_maxlength': 'int',
        'df': 'str',
        'qf': 'str',
        'carrot_snippet': 'str',
        'carrot_title': 'str'
    }

    attribute_map = {
        'def_type': 'defType',
        'sow': 'sow',
        'q_op': 'q.op',
        'bigram': 'bigram',
        'bigram_maxlength': 'bigram.maxlength',
        'df': 'df',
        'qf': 'qf',
        'carrot_snippet': 'carrot.snippet',
        'carrot_title': 'carrot.title'
    }

    def __init__(self, def_type=None, sow=None, q_op=None, bigram=None, bigram_maxlength=None, df=None, qf=None, carrot_snippet=None, carrot_title=None):
        """
        CollectionParamsQuery - a model defined in Swagger
        """

        self._def_type = None
        self._sow = None
        self._q_op = None
        self._bigram = None
        self._bigram_maxlength = None
        self._df = None
        self._qf = None
        self._carrot_snippet = None
        self._carrot_title = None

        if def_type is not None:
          self.def_type = def_type
        if sow is not None:
          self.sow = sow
        if q_op is not None:
          self.q_op = q_op
        if bigram is not None:
          self.bigram = bigram
        if bigram_maxlength is not None:
          self.bigram_maxlength = bigram_maxlength
        if df is not None:
          self.df = df
        if qf is not None:
          self.qf = qf
        if carrot_snippet is not None:
          self.carrot_snippet = carrot_snippet
        if carrot_title is not None:
          self.carrot_title = carrot_title

    @property
    def def_type(self):
        """
        Gets the def_type of this CollectionParamsQuery.

        :return: The def_type of this CollectionParamsQuery.
        :rtype: str
        """
        return self._def_type

    @def_type.setter
    def def_type(self, def_type):
        """
        Sets the def_type of this CollectionParamsQuery.

        :param def_type: The def_type of this CollectionParamsQuery.
        :type: str
        """

        self._def_type = def_type

    @property
    def sow(self):
        """
        Gets the sow of this CollectionParamsQuery.

        :return: The sow of this CollectionParamsQuery.
        :rtype: bool
        """
        return self._sow

    @sow.setter
    def sow(self, sow):
        """
        Sets the sow of this CollectionParamsQuery.

        :param sow: The sow of this CollectionParamsQuery.
        :type: bool
        """

        self._sow = sow

    @property
    def q_op(self):
        """
        Gets the q_op of this CollectionParamsQuery.

        :return: The q_op of this CollectionParamsQuery.
        :rtype: str
        """
        return self._q_op

    @q_op.setter
    def q_op(self, q_op):
        """
        Sets the q_op of this CollectionParamsQuery.

        :param q_op: The q_op of this CollectionParamsQuery.
        :type: str
        """

        self._q_op = q_op

    @property
    def bigram(self):
        """
        Gets the bigram of this CollectionParamsQuery.

        :return: The bigram of this CollectionParamsQuery.
        :rtype: str
        """
        return self._bigram

    @bigram.setter
    def bigram(self, bigram):
        """
        Sets the bigram of this CollectionParamsQuery.

        :param bigram: The bigram of this CollectionParamsQuery.
        :type: str
        """

        self._bigram = bigram

    @property
    def bigram_maxlength(self):
        """
        Gets the bigram_maxlength of this CollectionParamsQuery.

        :return: The bigram_maxlength of this CollectionParamsQuery.
        :rtype: int
        """
        return self._bigram_maxlength

    @bigram_maxlength.setter
    def bigram_maxlength(self, bigram_maxlength):
        """
        Sets the bigram_maxlength of this CollectionParamsQuery.

        :param bigram_maxlength: The bigram_maxlength of this CollectionParamsQuery.
        :type: int
        """

        self._bigram_maxlength = bigram_maxlength

    @property
    def df(self):
        """
        Gets the df of this CollectionParamsQuery.

        :return: The df of this CollectionParamsQuery.
        :rtype: str
        """
        return self._df

    @df.setter
    def df(self, df):
        """
        Sets the df of this CollectionParamsQuery.

        :param df: The df of this CollectionParamsQuery.
        :type: str
        """

        self._df = df

    @property
    def qf(self):
        """
        Gets the qf of this CollectionParamsQuery.

        :return: The qf of this CollectionParamsQuery.
        :rtype: str
        """
        return self._qf

    @qf.setter
    def qf(self, qf):
        """
        Sets the qf of this CollectionParamsQuery.

        :param qf: The qf of this CollectionParamsQuery.
        :type: str
        """

        self._qf = qf

    @property
    def carrot_snippet(self):
        """
        Gets the carrot_snippet of this CollectionParamsQuery.

        :return: The carrot_snippet of this CollectionParamsQuery.
        :rtype: str
        """
        return self._carrot_snippet

    @carrot_snippet.setter
    def carrot_snippet(self, carrot_snippet):
        """
        Sets the carrot_snippet of this CollectionParamsQuery.

        :param carrot_snippet: The carrot_snippet of this CollectionParamsQuery.
        :type: str
        """

        self._carrot_snippet = carrot_snippet

    @property
    def carrot_title(self):
        """
        Gets the carrot_title of this CollectionParamsQuery.

        :return: The carrot_title of this CollectionParamsQuery.
        :rtype: str
        """
        return self._carrot_title

    @carrot_title.setter
    def carrot_title(self, carrot_title):
        """
        Sets the carrot_title of this CollectionParamsQuery.

        :param carrot_title: The carrot_title of this CollectionParamsQuery.
        :type: str
        """

        self._carrot_title = carrot_title

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CollectionParamsQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
