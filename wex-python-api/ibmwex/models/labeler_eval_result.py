# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LabelerEvalResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label_wise': 'LabelWiseClassifierMeasurements',
        'macro_average': 'MacroAvgClassifierMeasurements',
        'micro_average': 'MicroAvgClassifierMeasurements',
        'model_id': 'str'
    }

    attribute_map = {
        'label_wise': 'labelWise',
        'macro_average': 'macroAverage',
        'micro_average': 'microAverage',
        'model_id': 'modelId'
    }

    def __init__(self, label_wise=None, macro_average=None, micro_average=None, model_id=None):
        """
        LabelerEvalResult - a model defined in Swagger
        """

        self._label_wise = None
        self._macro_average = None
        self._micro_average = None
        self._model_id = None

        if label_wise is not None:
          self.label_wise = label_wise
        if macro_average is not None:
          self.macro_average = macro_average
        if micro_average is not None:
          self.micro_average = micro_average
        if model_id is not None:
          self.model_id = model_id

    @property
    def label_wise(self):
        """
        Gets the label_wise of this LabelerEvalResult.

        :return: The label_wise of this LabelerEvalResult.
        :rtype: LabelWiseClassifierMeasurements
        """
        return self._label_wise

    @label_wise.setter
    def label_wise(self, label_wise):
        """
        Sets the label_wise of this LabelerEvalResult.

        :param label_wise: The label_wise of this LabelerEvalResult.
        :type: LabelWiseClassifierMeasurements
        """

        self._label_wise = label_wise

    @property
    def macro_average(self):
        """
        Gets the macro_average of this LabelerEvalResult.

        :return: The macro_average of this LabelerEvalResult.
        :rtype: MacroAvgClassifierMeasurements
        """
        return self._macro_average

    @macro_average.setter
    def macro_average(self, macro_average):
        """
        Sets the macro_average of this LabelerEvalResult.

        :param macro_average: The macro_average of this LabelerEvalResult.
        :type: MacroAvgClassifierMeasurements
        """

        self._macro_average = macro_average

    @property
    def micro_average(self):
        """
        Gets the micro_average of this LabelerEvalResult.

        :return: The micro_average of this LabelerEvalResult.
        :rtype: MicroAvgClassifierMeasurements
        """
        return self._micro_average

    @micro_average.setter
    def micro_average(self, micro_average):
        """
        Sets the micro_average of this LabelerEvalResult.

        :param micro_average: The micro_average of this LabelerEvalResult.
        :type: MicroAvgClassifierMeasurements
        """

        self._micro_average = micro_average

    @property
    def model_id(self):
        """
        Gets the model_id of this LabelerEvalResult.
        ID of the labeler model used for the evaluation

        :return: The model_id of this LabelerEvalResult.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """
        Sets the model_id of this LabelerEvalResult.
        ID of the labeler model used for the evaluation

        :param model_id: The model_id of this LabelerEvalResult.
        :type: str
        """

        self._model_id = model_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LabelerEvalResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
