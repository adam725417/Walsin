# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RankerMeasurements(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'k': 'float',
        'found_in_top_k': 'float'
    }

    attribute_map = {
        'k': 'k',
        'found_in_top_k': 'foundInTopK'
    }

    def __init__(self, k=None, found_in_top_k=None):
        """
        RankerMeasurements - a model defined in Swagger
        """

        self._k = None
        self._found_in_top_k = None

        if k is not None:
          self.k = k
        if found_in_top_k is not None:
          self.found_in_top_k = found_in_top_k

    @property
    def k(self):
        """
        Gets the k of this RankerMeasurements.
        Number of documents from the top of the ranking used for the evaluation

        :return: The k of this RankerMeasurements.
        :rtype: float
        """
        return self._k

    @k.setter
    def k(self, k):
        """
        Sets the k of this RankerMeasurements.
        Number of documents from the top of the ranking used for the evaluation

        :param k: The k of this RankerMeasurements.
        :type: float
        """

        self._k = k

    @property
    def found_in_top_k(self):
        """
        Gets the found_in_top_k of this RankerMeasurements.
        Ratio of queries whose one or more correct documents are found in Top-K result

        :return: The found_in_top_k of this RankerMeasurements.
        :rtype: float
        """
        return self._found_in_top_k

    @found_in_top_k.setter
    def found_in_top_k(self, found_in_top_k):
        """
        Sets the found_in_top_k of this RankerMeasurements.
        Ratio of queries whose one or more correct documents are found in Top-K result

        :param found_in_top_k: The found_in_top_k of this RankerMeasurements.
        :type: float
        """

        self._found_in_top_k = found_in_top_k

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RankerMeasurements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
