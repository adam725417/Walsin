# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CollectionStatusDocprocDatasets(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset_id': 'str',
        'num_docs': 'int',
        'processed_num_docs': 'int',
        'processed_num_error_docs': 'int',
        'processed_num_removed_docs': 'int',
        'processed_num_removed_error_docs': 'int',
        'last_num_docs_update': 'int',
        'last_processed_num_docs_update': 'int',
        'last_ingested': 'int',
        'last_processed': 'int',
        'job': 'CollectionStatusDocprocJob',
        'state': 'str'
    }

    attribute_map = {
        'dataset_id': 'datasetID',
        'num_docs': 'numDocs',
        'processed_num_docs': 'processedNumDocs',
        'processed_num_error_docs': 'processedNumErrorDocs',
        'processed_num_removed_docs': 'processedNumRemovedDocs',
        'processed_num_removed_error_docs': 'processedNumRemovedErrorDocs',
        'last_num_docs_update': 'lastNumDocsUpdate',
        'last_processed_num_docs_update': 'lastProcessedNumDocsUpdate',
        'last_ingested': 'lastIngested',
        'last_processed': 'lastProcessed',
        'job': 'job',
        'state': 'state'
    }

    def __init__(self, dataset_id=None, num_docs=None, processed_num_docs=None, processed_num_error_docs=None, processed_num_removed_docs=None, processed_num_removed_error_docs=None, last_num_docs_update=None, last_processed_num_docs_update=None, last_ingested=None, last_processed=None, job=None, state=None):
        """
        CollectionStatusDocprocDatasets - a model defined in Swagger
        """

        self._dataset_id = None
        self._num_docs = None
        self._processed_num_docs = None
        self._processed_num_error_docs = None
        self._processed_num_removed_docs = None
        self._processed_num_removed_error_docs = None
        self._last_num_docs_update = None
        self._last_processed_num_docs_update = None
        self._last_ingested = None
        self._last_processed = None
        self._job = None
        self._state = None

        if dataset_id is not None:
          self.dataset_id = dataset_id
        if num_docs is not None:
          self.num_docs = num_docs
        if processed_num_docs is not None:
          self.processed_num_docs = processed_num_docs
        if processed_num_error_docs is not None:
          self.processed_num_error_docs = processed_num_error_docs
        if processed_num_removed_docs is not None:
          self.processed_num_removed_docs = processed_num_removed_docs
        if processed_num_removed_error_docs is not None:
          self.processed_num_removed_error_docs = processed_num_removed_error_docs
        if last_num_docs_update is not None:
          self.last_num_docs_update = last_num_docs_update
        if last_processed_num_docs_update is not None:
          self.last_processed_num_docs_update = last_processed_num_docs_update
        if last_ingested is not None:
          self.last_ingested = last_ingested
        if last_processed is not None:
          self.last_processed = last_processed
        if job is not None:
          self.job = job
        if state is not None:
          self.state = state

    @property
    def dataset_id(self):
        """
        Gets the dataset_id of this CollectionStatusDocprocDatasets.

        :return: The dataset_id of this CollectionStatusDocprocDatasets.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """
        Sets the dataset_id of this CollectionStatusDocprocDatasets.

        :param dataset_id: The dataset_id of this CollectionStatusDocprocDatasets.
        :type: str
        """

        self._dataset_id = dataset_id

    @property
    def num_docs(self):
        """
        Gets the num_docs of this CollectionStatusDocprocDatasets.

        :return: The num_docs of this CollectionStatusDocprocDatasets.
        :rtype: int
        """
        return self._num_docs

    @num_docs.setter
    def num_docs(self, num_docs):
        """
        Sets the num_docs of this CollectionStatusDocprocDatasets.

        :param num_docs: The num_docs of this CollectionStatusDocprocDatasets.
        :type: int
        """

        self._num_docs = num_docs

    @property
    def processed_num_docs(self):
        """
        Gets the processed_num_docs of this CollectionStatusDocprocDatasets.

        :return: The processed_num_docs of this CollectionStatusDocprocDatasets.
        :rtype: int
        """
        return self._processed_num_docs

    @processed_num_docs.setter
    def processed_num_docs(self, processed_num_docs):
        """
        Sets the processed_num_docs of this CollectionStatusDocprocDatasets.

        :param processed_num_docs: The processed_num_docs of this CollectionStatusDocprocDatasets.
        :type: int
        """

        self._processed_num_docs = processed_num_docs

    @property
    def processed_num_error_docs(self):
        """
        Gets the processed_num_error_docs of this CollectionStatusDocprocDatasets.

        :return: The processed_num_error_docs of this CollectionStatusDocprocDatasets.
        :rtype: int
        """
        return self._processed_num_error_docs

    @processed_num_error_docs.setter
    def processed_num_error_docs(self, processed_num_error_docs):
        """
        Sets the processed_num_error_docs of this CollectionStatusDocprocDatasets.

        :param processed_num_error_docs: The processed_num_error_docs of this CollectionStatusDocprocDatasets.
        :type: int
        """

        self._processed_num_error_docs = processed_num_error_docs

    @property
    def processed_num_removed_docs(self):
        """
        Gets the processed_num_removed_docs of this CollectionStatusDocprocDatasets.

        :return: The processed_num_removed_docs of this CollectionStatusDocprocDatasets.
        :rtype: int
        """
        return self._processed_num_removed_docs

    @processed_num_removed_docs.setter
    def processed_num_removed_docs(self, processed_num_removed_docs):
        """
        Sets the processed_num_removed_docs of this CollectionStatusDocprocDatasets.

        :param processed_num_removed_docs: The processed_num_removed_docs of this CollectionStatusDocprocDatasets.
        :type: int
        """

        self._processed_num_removed_docs = processed_num_removed_docs

    @property
    def processed_num_removed_error_docs(self):
        """
        Gets the processed_num_removed_error_docs of this CollectionStatusDocprocDatasets.

        :return: The processed_num_removed_error_docs of this CollectionStatusDocprocDatasets.
        :rtype: int
        """
        return self._processed_num_removed_error_docs

    @processed_num_removed_error_docs.setter
    def processed_num_removed_error_docs(self, processed_num_removed_error_docs):
        """
        Sets the processed_num_removed_error_docs of this CollectionStatusDocprocDatasets.

        :param processed_num_removed_error_docs: The processed_num_removed_error_docs of this CollectionStatusDocprocDatasets.
        :type: int
        """

        self._processed_num_removed_error_docs = processed_num_removed_error_docs

    @property
    def last_num_docs_update(self):
        """
        Gets the last_num_docs_update of this CollectionStatusDocprocDatasets.

        :return: The last_num_docs_update of this CollectionStatusDocprocDatasets.
        :rtype: int
        """
        return self._last_num_docs_update

    @last_num_docs_update.setter
    def last_num_docs_update(self, last_num_docs_update):
        """
        Sets the last_num_docs_update of this CollectionStatusDocprocDatasets.

        :param last_num_docs_update: The last_num_docs_update of this CollectionStatusDocprocDatasets.
        :type: int
        """

        self._last_num_docs_update = last_num_docs_update

    @property
    def last_processed_num_docs_update(self):
        """
        Gets the last_processed_num_docs_update of this CollectionStatusDocprocDatasets.

        :return: The last_processed_num_docs_update of this CollectionStatusDocprocDatasets.
        :rtype: int
        """
        return self._last_processed_num_docs_update

    @last_processed_num_docs_update.setter
    def last_processed_num_docs_update(self, last_processed_num_docs_update):
        """
        Sets the last_processed_num_docs_update of this CollectionStatusDocprocDatasets.

        :param last_processed_num_docs_update: The last_processed_num_docs_update of this CollectionStatusDocprocDatasets.
        :type: int
        """

        self._last_processed_num_docs_update = last_processed_num_docs_update

    @property
    def last_ingested(self):
        """
        Gets the last_ingested of this CollectionStatusDocprocDatasets.

        :return: The last_ingested of this CollectionStatusDocprocDatasets.
        :rtype: int
        """
        return self._last_ingested

    @last_ingested.setter
    def last_ingested(self, last_ingested):
        """
        Sets the last_ingested of this CollectionStatusDocprocDatasets.

        :param last_ingested: The last_ingested of this CollectionStatusDocprocDatasets.
        :type: int
        """

        self._last_ingested = last_ingested

    @property
    def last_processed(self):
        """
        Gets the last_processed of this CollectionStatusDocprocDatasets.

        :return: The last_processed of this CollectionStatusDocprocDatasets.
        :rtype: int
        """
        return self._last_processed

    @last_processed.setter
    def last_processed(self, last_processed):
        """
        Sets the last_processed of this CollectionStatusDocprocDatasets.

        :param last_processed: The last_processed of this CollectionStatusDocprocDatasets.
        :type: int
        """

        self._last_processed = last_processed

    @property
    def job(self):
        """
        Gets the job of this CollectionStatusDocprocDatasets.

        :return: The job of this CollectionStatusDocprocDatasets.
        :rtype: CollectionStatusDocprocJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """
        Sets the job of this CollectionStatusDocprocDatasets.

        :param job: The job of this CollectionStatusDocprocDatasets.
        :type: CollectionStatusDocprocJob
        """

        self._job = job

    @property
    def state(self):
        """
        Gets the state of this CollectionStatusDocprocDatasets.

        :return: The state of this CollectionStatusDocprocDatasets.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CollectionStatusDocprocDatasets.

        :param state: The state of this CollectionStatusDocprocDatasets.
        :type: str
        """

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CollectionStatusDocprocDatasets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
