# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConverterPipelineStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_num': 'int',
        'error_num': 'int',
        'errors': 'list[ConverterError]',
        'input_num': 'int',
        'output_num': 'int',
        'published_num': 'int',
        'status': 'str'
    }

    attribute_map = {
        'document_num': 'documentNum',
        'error_num': 'errorNum',
        'errors': 'errors',
        'input_num': 'inputNum',
        'output_num': 'outputNum',
        'published_num': 'publishedNum',
        'status': 'status'
    }

    def __init__(self, document_num=None, error_num=None, errors=None, input_num=None, output_num=None, published_num=None, status=None):
        """
        ConverterPipelineStatus - a model defined in Swagger
        """

        self._document_num = None
        self._error_num = None
        self._errors = None
        self._input_num = None
        self._output_num = None
        self._published_num = None
        self._status = None

        if document_num is not None:
          self.document_num = document_num
        if error_num is not None:
          self.error_num = error_num
        if errors is not None:
          self.errors = errors
        if input_num is not None:
          self.input_num = input_num
        if output_num is not None:
          self.output_num = output_num
        if published_num is not None:
          self.published_num = published_num
        if status is not None:
          self.status = status

    @property
    def document_num(self):
        """
        Gets the document_num of this ConverterPipelineStatus.

        :return: The document_num of this ConverterPipelineStatus.
        :rtype: int
        """
        return self._document_num

    @document_num.setter
    def document_num(self, document_num):
        """
        Sets the document_num of this ConverterPipelineStatus.

        :param document_num: The document_num of this ConverterPipelineStatus.
        :type: int
        """

        self._document_num = document_num

    @property
    def error_num(self):
        """
        Gets the error_num of this ConverterPipelineStatus.

        :return: The error_num of this ConverterPipelineStatus.
        :rtype: int
        """
        return self._error_num

    @error_num.setter
    def error_num(self, error_num):
        """
        Sets the error_num of this ConverterPipelineStatus.

        :param error_num: The error_num of this ConverterPipelineStatus.
        :type: int
        """

        self._error_num = error_num

    @property
    def errors(self):
        """
        Gets the errors of this ConverterPipelineStatus.

        :return: The errors of this ConverterPipelineStatus.
        :rtype: list[ConverterError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this ConverterPipelineStatus.

        :param errors: The errors of this ConverterPipelineStatus.
        :type: list[ConverterError]
        """

        self._errors = errors

    @property
    def input_num(self):
        """
        Gets the input_num of this ConverterPipelineStatus.

        :return: The input_num of this ConverterPipelineStatus.
        :rtype: int
        """
        return self._input_num

    @input_num.setter
    def input_num(self, input_num):
        """
        Sets the input_num of this ConverterPipelineStatus.

        :param input_num: The input_num of this ConverterPipelineStatus.
        :type: int
        """

        self._input_num = input_num

    @property
    def output_num(self):
        """
        Gets the output_num of this ConverterPipelineStatus.

        :return: The output_num of this ConverterPipelineStatus.
        :rtype: int
        """
        return self._output_num

    @output_num.setter
    def output_num(self, output_num):
        """
        Sets the output_num of this ConverterPipelineStatus.

        :param output_num: The output_num of this ConverterPipelineStatus.
        :type: int
        """

        self._output_num = output_num

    @property
    def published_num(self):
        """
        Gets the published_num of this ConverterPipelineStatus.

        :return: The published_num of this ConverterPipelineStatus.
        :rtype: int
        """
        return self._published_num

    @published_num.setter
    def published_num(self, published_num):
        """
        Sets the published_num of this ConverterPipelineStatus.

        :param published_num: The published_num of this ConverterPipelineStatus.
        :type: int
        """

        self._published_num = published_num

    @property
    def status(self):
        """
        Gets the status of this ConverterPipelineStatus.

        :return: The status of this ConverterPipelineStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ConverterPipelineStatus.

        :param status: The status of this ConverterPipelineStatus.
        :type: str
        """
        allowed_values = ["Waiting", "Running", "Stopped", "Unknown", "Errored"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConverterPipelineStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
