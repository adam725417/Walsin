# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LogRecord(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'message': 'str',
        'process_id': 'int',
        'user_name': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'level': 'level',
        'message': 'message',
        'process_id': 'processId',
        'user_name': 'userName',
        'timestamp': 'timestamp'
    }

    def __init__(self, level=None, message=None, process_id=None, user_name=None, timestamp=None):
        """
        LogRecord - a model defined in Swagger
        """

        self._level = None
        self._message = None
        self._process_id = None
        self._user_name = None
        self._timestamp = None

        if level is not None:
          self.level = level
        if message is not None:
          self.message = message
        if process_id is not None:
          self.process_id = process_id
        if user_name is not None:
          self.user_name = user_name
        if timestamp is not None:
          self.timestamp = timestamp

    @property
    def level(self):
        """
        Gets the level of this LogRecord.

        :return: The level of this LogRecord.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this LogRecord.

        :param level: The level of this LogRecord.
        :type: str
        """
        allowed_values = ["INFO", "WARNING", "SEVERE", "FINE", "FINER", "FINEST"]
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def message(self):
        """
        Gets the message of this LogRecord.
        Formatted message

        :return: The message of this LogRecord.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this LogRecord.
        Formatted message

        :param message: The message of this LogRecord.
        :type: str
        """

        self._message = message

    @property
    def process_id(self):
        """
        Gets the process_id of this LogRecord.
        process ID

        :return: The process_id of this LogRecord.
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """
        Sets the process_id of this LogRecord.
        process ID

        :param process_id: The process_id of this LogRecord.
        :type: int
        """

        self._process_id = process_id

    @property
    def user_name(self):
        """
        Gets the user_name of this LogRecord.
        User name

        :return: The user_name of this LogRecord.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this LogRecord.
        User name

        :param user_name: The user_name of this LogRecord.
        :type: str
        """

        self._user_name = user_name

    @property
    def timestamp(self):
        """
        Gets the timestamp of this LogRecord.
        timestamp in \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"

        :return: The timestamp of this LogRecord.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this LogRecord.
        timestamp in \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"

        :param timestamp: The timestamp of this LogRecord.
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LogRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
