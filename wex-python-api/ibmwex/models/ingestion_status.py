# coding: utf-8

"""
    WEX REST APIs

    Authentication methods - Basic Auth - JSON Web Token   - [POST /api/v1/usermgmt/login](#!/User/signinUser)   - [POST /api/v1/usermgmt/logout](#!/User/doLogout) - Python client sample [Download](/docs/wex-python-api.zip) 

    OpenAPI spec version: 12.0.2.417
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class IngestionStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'converter_pipeline_status': 'ConverterPipelineStatus',
        'crawler_status': 'CrawlerStatus',
        'status': 'str'
    }

    attribute_map = {
        'converter_pipeline_status': 'converterPipelineStatus',
        'crawler_status': 'crawlerStatus',
        'status': 'status'
    }

    def __init__(self, converter_pipeline_status=None, crawler_status=None, status=None):
        """
        IngestionStatus - a model defined in Swagger
        """

        self._converter_pipeline_status = None
        self._crawler_status = None
        self._status = None

        if converter_pipeline_status is not None:
          self.converter_pipeline_status = converter_pipeline_status
        if crawler_status is not None:
          self.crawler_status = crawler_status
        if status is not None:
          self.status = status

    @property
    def converter_pipeline_status(self):
        """
        Gets the converter_pipeline_status of this IngestionStatus.

        :return: The converter_pipeline_status of this IngestionStatus.
        :rtype: ConverterPipelineStatus
        """
        return self._converter_pipeline_status

    @converter_pipeline_status.setter
    def converter_pipeline_status(self, converter_pipeline_status):
        """
        Sets the converter_pipeline_status of this IngestionStatus.

        :param converter_pipeline_status: The converter_pipeline_status of this IngestionStatus.
        :type: ConverterPipelineStatus
        """

        self._converter_pipeline_status = converter_pipeline_status

    @property
    def crawler_status(self):
        """
        Gets the crawler_status of this IngestionStatus.

        :return: The crawler_status of this IngestionStatus.
        :rtype: CrawlerStatus
        """
        return self._crawler_status

    @crawler_status.setter
    def crawler_status(self, crawler_status):
        """
        Sets the crawler_status of this IngestionStatus.

        :param crawler_status: The crawler_status of this IngestionStatus.
        :type: CrawlerStatus
        """

        self._crawler_status = crawler_status

    @property
    def status(self):
        """
        Gets the status of this IngestionStatus.

        :return: The status of this IngestionStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this IngestionStatus.

        :param status: The status of this IngestionStatus.
        :type: str
        """
        allowed_values = ["NotStarted", "Started", "Running", "Stopped", "Completed", "Errored"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, IngestionStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
